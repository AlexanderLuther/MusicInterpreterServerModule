/* The following code was generated by JFlex 1.4.1 on 7/09/21 19:02 */

package com.hluther.interpreter.lexer;

import java.io.*;   
import javax.swing.text.Segment;   
   import org.fife.ui.rsyntaxtextarea.*;   
   

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 7/09/21 19:02 from the specification file
 * <tt>TextEditorLexer.flex</tt>
 */
public class TokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\63\1\11\1\0\1\7\1\62\22\0\1\63\1\4\1\5"+
    "\1\6\1\0\1\67\1\71\1\10\2\64\1\67\1\72\1\16\1\13"+
    "\1\66\1\67\1\65\11\2\1\4\1\16\1\12\1\70\1\14\1\4"+
    "\1\0\1\55\1\47\1\50\1\46\1\45\1\57\1\1\1\53\1\61"+
    "\1\1\1\31\1\60\1\43\2\1\1\51\1\1\1\54\1\52\1\56"+
    "\1\1\1\33\4\1\1\15\1\3\1\15\1\4\1\1\1\0\1\27"+
    "\1\25\1\30\1\24\1\17\1\41\1\44\1\40\1\34\1\1\1\31"+
    "\1\26\1\43\1\20\1\23\1\32\1\1\1\22\1\35\1\21\1\42"+
    "\1\33\1\37\1\36\2\1\1\15\1\73\1\15\1\4\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\3\3\1\10\20\1\1\2\4\3\1\11\1\12\1\11"+
    "\1\13\1\0\1\4\1\14\1\4\2\6\1\15\1\6"+
    "\1\16\1\17\3\1\1\20\1\1\1\20\1\1\1\20"+
    "\13\1\1\20\2\1\3\20\1\2\1\21\1\22\1\23"+
    "\1\24\1\15\3\1\1\20\23\1\1\22\16\1\1\22"+
    "\12\1\1\22\6\1\1\22\3\1\1\22\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\170\0\u012c\0\u0168"+
    "\0\u01a4\0\170\0\u01e0\0\u021c\0\u0258\0\170\0\u0294\0\u02d0"+
    "\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"+
    "\0\u06cc\0\u0708\0\u0744\0\u0780\0\170\0\u07bc\0\u07f8\0\u0834"+
    "\0\u0870\0\170\0\u08ac\0\u08e8\0\u0924\0\170\0\u0960\0\170"+
    "\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40"+
    "\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20"+
    "\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00"+
    "\0\u0f3c\0\264\0\u0f78\0\170\0\u0fb4\0\170\0\170\0\u0ff0"+
    "\0\u102c\0\u1068\0\u10a4\0\170\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554"+
    "\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734"+
    "\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914"+
    "\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4"+
    "\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\170\0\u1e00";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\6\1\7\1\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\3\1\17"+
    "\1\4\1\20\1\21\1\4\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\4\1\32\2\4\1\33"+
    "\1\34\1\4\1\35\1\4\1\17\1\22\1\23\1\26"+
    "\1\30\1\36\1\33\1\21\1\25\1\20\1\34\1\24"+
    "\1\4\1\3\1\10\1\16\1\37\1\3\2\40\1\41"+
    "\1\42\1\43\11\44\1\45\1\44\1\46\60\44\75\0"+
    "\2\4\14\0\43\4\3\0\1\4\6\0\2\47\1\5"+
    "\1\47\2\0\1\47\10\0\43\47\3\0\1\5\1\50"+
    "\5\0\3\7\1\51\1\7\1\52\3\7\1\53\62\7"+
    "\7\0\1\10\53\0\1\10\10\0\6\54\1\55\1\54"+
    "\1\56\1\0\50\54\3\57\7\54\12\0\1\40\1\60"+
    "\73\0\1\6\54\0\1\6\17\0\1\61\60\0\2\4"+
    "\14\0\1\4\1\62\15\4\1\63\23\4\3\0\1\4"+
    "\7\0\2\4\14\0\3\4\1\64\37\4\3\0\1\4"+
    "\7\0\2\4\14\0\1\65\42\4\3\0\1\4\7\0"+
    "\2\4\14\0\1\66\3\4\1\67\36\4\3\0\1\4"+
    "\7\0\2\4\14\0\4\4\1\70\36\4\3\0\1\4"+
    "\7\0\2\4\14\0\10\4\1\71\32\4\3\0\1\4"+
    "\7\0\2\4\14\0\3\4\1\72\37\4\3\0\1\4"+
    "\7\0\2\4\14\0\4\4\1\73\3\4\1\74\32\4"+
    "\3\0\1\4\7\0\2\4\14\0\1\75\42\4\3\0"+
    "\1\4\7\0\2\4\14\0\3\4\1\76\4\4\1\77"+
    "\4\4\1\100\25\4\3\0\1\4\7\0\2\4\14\0"+
    "\1\101\7\4\1\102\32\4\3\0\1\4\7\0\2\4"+
    "\14\0\4\4\1\103\3\4\1\104\4\4\1\105\2\4"+
    "\1\106\22\4\3\0\1\4\7\0\2\4\14\0\10\4"+
    "\1\107\32\4\3\0\1\4\7\0\2\4\14\0\10\4"+
    "\1\110\32\4\3\0\1\4\7\0\2\4\14\0\15\4"+
    "\1\111\25\4\3\0\1\4\7\0\2\4\14\0\4\4"+
    "\1\103\3\4\1\104\4\4\1\105\2\4\1\106\21\4"+
    "\1\112\3\0\1\4\6\0\2\47\1\113\1\47\2\0"+
    "\1\47\10\0\43\47\3\0\1\113\1\50\75\0\1\6"+
    "\74\0\1\6\72\0\1\6\1\0\1\6\74\0\1\6"+
    "\11\44\1\0\1\44\1\0\60\44\14\0\1\114\57\0"+
    "\4\47\2\0\1\47\10\0\43\47\3\0\1\47\10\0"+
    "\1\115\62\0\1\115\6\0\11\53\1\0\65\53\1\51"+
    "\1\53\1\116\66\53\10\57\1\117\1\0\70\57\1\54"+
    "\1\57\1\120\1\0\6\57\2\54\62\57\1\56\1\0"+
    "\62\57\11\61\1\0\62\61\1\0\2\4\14\0\2\4"+
    "\1\121\40\4\3\0\1\4\7\0\2\4\14\0\2\4"+
    "\1\122\40\4\3\0\1\4\7\0\2\4\14\0\23\4"+
    "\1\123\17\4\3\0\1\4\7\0\2\4\3\0\1\124"+
    "\10\0\2\4\1\125\40\4\3\0\1\4\7\0\2\4"+
    "\14\0\22\4\1\126\20\4\3\0\1\4\7\0\2\4"+
    "\3\0\1\124\10\0\6\4\1\127\34\4\3\0\1\4"+
    "\7\0\2\4\14\0\4\4\1\130\36\4\3\0\1\4"+
    "\7\0\2\4\3\0\1\124\10\0\43\4\3\0\1\4"+
    "\7\0\2\4\14\0\3\4\1\131\37\4\3\0\1\4"+
    "\7\0\2\4\14\0\1\4\1\132\41\4\3\0\1\4"+
    "\7\0\2\4\14\0\3\4\1\133\1\4\1\134\10\4"+
    "\1\135\24\4\3\0\1\4\7\0\2\4\14\0\1\136"+
    "\42\4\3\0\1\4\7\0\2\4\14\0\15\4\1\137"+
    "\25\4\3\0\1\4\7\0\2\4\14\0\3\4\1\140"+
    "\37\4\3\0\1\4\7\0\2\4\14\0\16\4\1\141"+
    "\24\4\3\0\1\4\7\0\2\4\14\0\3\4\1\142"+
    "\37\4\3\0\1\4\7\0\2\4\14\0\3\4\1\112"+
    "\37\4\3\0\1\4\7\0\2\4\14\0\7\4\1\71"+
    "\33\4\3\0\1\4\7\0\2\4\14\0\7\4\1\143"+
    "\33\4\3\0\1\4\7\0\2\4\14\0\1\4\1\135"+
    "\41\4\3\0\1\4\7\0\2\4\14\0\15\4\1\144"+
    "\25\4\3\0\1\4\7\0\2\4\14\0\11\4\1\145"+
    "\31\4\3\0\1\4\7\0\2\4\3\0\1\124\10\0"+
    "\7\4\1\146\33\4\3\0\1\4\7\0\2\4\14\0"+
    "\1\147\42\4\3\0\1\4\6\0\2\47\1\113\1\47"+
    "\2\0\1\47\10\0\43\47\3\0\1\113\10\0\1\150"+
    "\62\0\1\150\16\0\1\117\64\0\2\4\14\0\1\151"+
    "\42\4\3\0\1\4\7\0\2\4\14\0\15\4\1\152"+
    "\25\4\3\0\1\4\7\0\2\4\14\0\1\112\42\4"+
    "\3\0\1\4\7\0\2\4\14\0\4\4\1\153\36\4"+
    "\3\0\1\4\7\0\2\4\14\0\10\4\1\154\32\4"+
    "\3\0\1\4\7\0\2\4\14\0\7\4\1\123\33\4"+
    "\3\0\1\4\7\0\2\4\14\0\7\4\1\155\33\4"+
    "\3\0\1\4\7\0\2\4\14\0\1\156\42\4\3\0"+
    "\1\4\7\0\2\4\14\0\2\4\1\157\40\4\3\0"+
    "\1\4\7\0\2\4\14\0\10\4\1\160\32\4\3\0"+
    "\1\4\7\0\2\4\14\0\1\161\42\4\3\0\1\4"+
    "\7\0\2\4\14\0\4\4\1\112\36\4\3\0\1\4"+
    "\7\0\2\4\14\0\13\4\1\112\27\4\3\0\1\4"+
    "\7\0\2\4\14\0\1\4\1\162\41\4\3\0\1\4"+
    "\7\0\2\4\14\0\10\4\1\112\32\4\3\0\1\4"+
    "\7\0\2\4\14\0\2\4\1\140\40\4\3\0\1\4"+
    "\7\0\2\4\14\0\5\4\1\163\35\4\3\0\1\4"+
    "\7\0\2\4\14\0\15\4\1\102\25\4\3\0\1\4"+
    "\7\0\2\4\14\0\2\4\1\164\40\4\3\0\1\4"+
    "\7\0\2\4\14\0\1\102\42\4\3\0\1\4\7\0"+
    "\2\4\14\0\16\4\1\165\24\4\3\0\1\4\7\0"+
    "\2\4\14\0\1\4\1\166\41\4\3\0\1\4\10\0"+
    "\1\167\62\0\1\167\7\0\2\4\14\0\3\4\1\135"+
    "\37\4\3\0\1\4\7\0\2\4\14\0\1\170\42\4"+
    "\3\0\1\4\7\0\2\4\14\0\3\4\1\161\37\4"+
    "\3\0\1\4\7\0\2\4\14\0\23\4\1\171\17\4"+
    "\3\0\1\4\7\0\2\4\14\0\1\172\42\4\3\0"+
    "\1\4\7\0\2\4\14\0\25\4\1\173\15\4\3\0"+
    "\1\4\7\0\2\4\14\0\15\4\1\174\25\4\3\0"+
    "\1\4\7\0\2\4\14\0\11\4\1\175\31\4\3\0"+
    "\1\4\7\0\2\4\14\0\1\4\1\140\41\4\3\0"+
    "\1\4\7\0\2\4\14\0\11\4\1\176\31\4\3\0"+
    "\1\4\7\0\2\4\14\0\10\4\1\177\32\4\3\0"+
    "\1\4\7\0\2\4\14\0\11\4\1\200\31\4\3\0"+
    "\1\4\7\0\2\4\14\0\1\112\3\4\1\112\36\4"+
    "\3\0\1\4\7\0\2\4\14\0\2\4\1\201\40\4"+
    "\3\0\1\4\10\0\1\202\62\0\1\202\7\0\2\4"+
    "\14\0\1\4\1\203\41\4\3\0\1\4\7\0\2\4"+
    "\14\0\7\4\1\204\33\4\3\0\1\4\7\0\2\4"+
    "\14\0\10\4\1\205\32\4\3\0\1\4\7\0\2\4"+
    "\14\0\7\4\1\135\33\4\3\0\1\4\7\0\2\4"+
    "\14\0\1\4\1\206\41\4\3\0\1\4\7\0\2\4"+
    "\14\0\2\4\1\145\40\4\3\0\1\4\7\0\2\4"+
    "\14\0\15\4\1\207\25\4\3\0\1\4\7\0\2\4"+
    "\14\0\5\4\1\121\35\4\3\0\1\4\7\0\2\4"+
    "\14\0\21\4\1\112\21\4\3\0\1\4\7\0\2\4"+
    "\14\0\3\4\1\210\37\4\3\0\1\4\10\0\1\211"+
    "\62\0\1\211\7\0\2\4\14\0\5\4\1\123\35\4"+
    "\3\0\1\4\7\0\2\4\14\0\2\4\1\112\40\4"+
    "\3\0\1\4\7\0\2\4\14\0\1\4\1\112\41\4"+
    "\3\0\1\4\7\0\2\4\14\0\23\4\1\212\17\4"+
    "\3\0\1\4\7\0\2\4\14\0\13\4\1\213\27\4"+
    "\3\0\1\4\7\0\2\4\14\0\10\4\1\214\32\4"+
    "\3\0\1\4\10\0\1\215\62\0\1\215\7\0\2\4"+
    "\14\0\10\4\1\102\32\4\3\0\1\4\7\0\2\4"+
    "\14\0\10\4\1\216\32\4\3\0\1\4\7\0\2\4"+
    "\14\0\16\4\1\112\24\4\3\0\1\4\7\0\2\4"+
    "\14\0\7\4\1\112\33\4\3\0\1\4\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7740];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\3\1\1\11\3\1\1\11"+
    "\26\1\1\11\2\1\1\0\1\1\1\11\3\1\1\11"+
    "\1\1\1\11\33\1\1\11\1\1\2\11\4\1\1\11"+
    "\70\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
   public TokenMaker() { }   
   
    private void addHyperlinkToken(int start, int end, int tokenType) {   
        int so = start + offsetShift;   
        addToken(zzBuffer, start,end, tokenType, so, true);   
    }   
   
    private void addToken(int tokenType) {   
       addToken(zzStartRead, zzMarkedPos-1, tokenType);   
    }   
   
    private void addToken(int start, int end, int tokenType) {   
       int so = start + offsetShift;   
       addToken(zzBuffer, start,end, tokenType, so, false);   
    }   
   
    public void addToken(char[] array, int start, int end, int tokenType,   
        int startOffset, boolean hyperlink) {   
        super.addToken(array, start,end, tokenType, startOffset, hyperlink);   
        zzStartRead = zzMarkedPos;   
    }   
   
    public String[] getLineCommentStartAndEnd() {   
        return new String[] { "//", null };   
    }   
   
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {   
        resetTokenList();   
        this.offsetShift = -text.offset + startOffset;  
        // Start off in the proper state.   
        int state = Token.NULL;   
        switch (initialTokenType) {   
                    case Token.COMMENT_MULTILINE:   
              state = MLC;   
              start = text.offset;   
              break;   

           /* No documentation comments */   
           default:   
              state = Token.NULL;   
        }   
        s = text;   
        try {   
           yyreset(zzReader);   
           yybegin(state);   
           return yylex();   
        } catch (IOException ioe) {   
           ioe.printStackTrace();   
           return new TokenImpl();   
        }   
    }   
   
    private boolean zzRefill() {   
       return zzCurrentPos>=s.offset+s.count;   
    }   
   
    public final void yyreset(Reader reader) {   
       zzBuffer = s.array;  
       zzStartRead = s.offset;   
       zzEndRead = zzStartRead + s.count - 1;   
       zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;   
       zzLexicalState = YYINITIAL;   
       zzReader = reader;   
       zzAtBOL  = true;   
       zzAtEOF  = false;   
    }   
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }
  
  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 21: break;
        case 20: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 22: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 23: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 24: break;
        case 19: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 25: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 26: break;
        case 16: 
          { addToken(Token.RESERVED_WORD);
          }
        case 27: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 28: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 29: break;
        case 6: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 30: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 31: break;
        case 17: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 32: break;
        case 13: 
          { addToken(Token.ERROR_CHAR);
          }
        case 33: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 34: break;
        case 15: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 35: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 36: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 37: break;
        case 3: 
          { addToken(Token.OPERATOR);
          }
        case 38: break;
        case 9: 
          { 
          }
        case 39: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 143: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 144: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
