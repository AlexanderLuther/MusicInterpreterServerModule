// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: TrackDefinitionLexer.flex

package com.hluther.interpreter.lexer;

import java.util.LinkedList;
import com.hluther.entity.MError;
import com.hluther.interpreter.parser.TrackSymbol;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class TrackLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\11\24\1\25\1\26\1\27\1\30\1\31\2\0\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\40\1\43\1\44\1\45\1\40\1\46\1\47\1\40"+
    "\1\50\1\51\1\52\1\40\1\53\4\40\1\54\1\0"+
    "\1\55\1\56\1\40\1\0\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\43\1\71"+
    "\1\72\1\73\1\74\1\75\1\40\1\76\1\77\1\100"+
    "\1\101\1\53\1\102\1\103\1\40\1\104\1\105\1\106"+
    "\1\107\54\0\1\40\12\0\1\40\4\0\1\40\5\0"+
    "\27\40\1\0\37\40\1\0\u01ca\40\4\0\14\40\16\0"+
    "\5\40\7\0\1\40\1\0\1\40\201\0\5\40\1\0"+
    "\2\40\2\0\4\40\1\0\1\40\6\0\1\40\1\0"+
    "\3\40\1\0\1\40\1\0\24\40\1\0\123\40\1\0"+
    "\213\40\10\0\246\40\1\0\46\40\2\0\1\40\6\0"+
    "\51\40\107\0\33\40\4\0\4\40\55\0\53\40\25\0"+
    "\12\110\4\0\2\40\1\0\143\40\1\0\1\40\17\0"+
    "\2\40\7\0\2\40\12\110\3\40\2\0\1\40\20\0"+
    "\1\40\1\0\36\40\35\0\131\40\13\0\1\40\16\0"+
    "\12\110\41\40\11\0\2\40\4\0\1\40\5\0\26\40"+
    "\4\0\1\40\11\0\1\40\3\0\1\40\27\0\31\40"+
    "\7\0\13\40\65\0\25\40\1\0\10\40\106\0\66\40"+
    "\3\0\1\40\22\0\1\40\7\0\12\40\4\0\12\110"+
    "\1\0\20\40\4\0\10\40\2\0\2\40\2\0\26\40"+
    "\1\0\7\40\1\0\1\40\3\0\4\40\3\0\1\40"+
    "\20\0\1\40\15\0\2\40\1\0\3\40\4\0\12\110"+
    "\2\40\12\0\1\40\10\0\6\40\4\0\2\40\2\0"+
    "\26\40\1\0\7\40\1\0\2\40\1\0\2\40\1\0"+
    "\2\40\37\0\4\40\1\0\1\40\7\0\12\110\2\0"+
    "\3\40\20\0\11\40\1\0\3\40\1\0\26\40\1\0"+
    "\7\40\1\0\2\40\1\0\5\40\3\0\1\40\22\0"+
    "\1\40\17\0\2\40\4\0\12\110\11\0\1\40\13\0"+
    "\10\40\2\0\2\40\2\0\26\40\1\0\7\40\1\0"+
    "\2\40\1\0\5\40\3\0\1\40\36\0\2\40\1\0"+
    "\3\40\4\0\12\110\1\0\1\40\21\0\1\40\1\0"+
    "\6\40\3\0\3\40\1\0\4\40\3\0\2\40\1\0"+
    "\1\40\1\0\2\40\3\0\2\40\3\0\3\40\3\0"+
    "\14\40\26\0\1\40\25\0\12\110\25\0\10\40\1\0"+
    "\3\40\1\0\27\40\1\0\20\40\3\0\1\40\32\0"+
    "\3\40\5\0\2\40\4\0\12\110\20\0\1\40\4\0"+
    "\10\40\1\0\3\40\1\0\27\40\1\0\12\40\1\0"+
    "\5\40\3\0\1\40\40\0\1\40\1\0\2\40\4\0"+
    "\12\110\1\0\2\40\22\0\10\40\1\0\3\40\1\0"+
    "\51\40\2\0\1\40\20\0\1\40\5\0\3\40\10\0"+
    "\3\40\4\0\12\110\12\0\6\40\5\0\22\40\3\0"+
    "\30\40\1\0\11\40\1\0\1\40\2\0\7\40\37\0"+
    "\12\110\21\0\60\40\1\0\2\40\14\0\7\40\11\0"+
    "\12\110\47\0\2\40\1\0\1\40\1\0\5\40\1\0"+
    "\30\40\1\0\1\40\1\0\12\40\1\0\2\40\11\0"+
    "\1\40\2\0\5\40\1\0\1\40\11\0\12\110\2\0"+
    "\4\40\40\0\1\40\37\0\12\110\26\0\10\40\1\0"+
    "\44\40\33\0\5\40\163\0\53\40\24\0\1\40\12\110"+
    "\6\0\6\40\4\0\4\40\3\0\1\40\3\0\2\40"+
    "\7\0\3\40\4\0\15\40\14\0\1\40\1\0\12\110"+
    "\6\0\46\40\1\0\1\40\5\0\1\40\2\0\53\40"+
    "\1\0\115\40\1\0\4\40\2\0\7\40\1\0\1\40"+
    "\1\0\4\40\2\0\51\40\1\0\4\40\2\0\41\40"+
    "\1\0\4\40\2\0\7\40\1\0\1\40\1\0\4\40"+
    "\2\0\17\40\1\0\71\40\1\0\4\40\2\0\103\40"+
    "\45\0\20\40\20\0\126\40\2\0\6\40\3\0\u016c\40"+
    "\2\0\21\40\1\0\32\40\5\0\113\40\6\0\10\40"+
    "\7\0\15\40\1\0\4\40\16\0\22\40\16\0\22\40"+
    "\16\0\15\40\1\0\3\40\17\0\64\40\43\0\1\40"+
    "\4\0\1\40\3\0\12\110\46\0\12\110\6\0\131\40"+
    "\7\0\5\40\2\0\42\40\1\0\1\40\5\0\106\40"+
    "\12\0\37\40\47\0\12\110\36\40\2\0\5\40\13\0"+
    "\54\40\4\0\32\40\6\0\12\110\46\0\27\40\11\0"+
    "\65\40\53\0\12\110\6\0\12\110\15\0\1\40\135\0"+
    "\57\40\21\0\7\40\4\0\12\110\51\0\36\40\15\0"+
    "\2\40\12\110\54\40\32\0\44\40\34\0\12\110\3\0"+
    "\3\40\12\110\44\40\2\0\11\40\7\0\53\40\2\0"+
    "\3\40\51\0\4\40\1\0\6\40\1\0\2\40\3\0"+
    "\1\40\5\0\300\40\100\0\26\40\2\0\6\40\2\0"+
    "\46\40\2\0\6\40\2\0\10\40\1\0\1\40\1\0"+
    "\1\40\1\0\1\40\1\0\37\40\2\0\65\40\1\0"+
    "\7\40\1\0\1\40\3\0\3\40\1\0\7\40\3\0"+
    "\4\40\2\0\6\40\4\0\15\40\5\0\3\40\1\0"+
    "\7\40\164\0\1\40\15\0\1\40\20\0\15\40\145\0"+
    "\1\40\4\0\1\40\2\0\12\40\1\0\1\40\3\0"+
    "\5\40\6\0\1\40\1\0\1\40\1\0\1\40\1\0"+
    "\4\40\1\0\13\40\2\0\4\40\5\0\5\40\4\0"+
    "\1\40\64\0\2\40\u017b\0\57\40\1\0\57\40\1\0"+
    "\205\40\6\0\4\40\3\0\2\40\14\0\46\40\1\0"+
    "\1\40\5\0\1\40\2\0\70\40\7\0\1\40\20\0"+
    "\27\40\11\0\7\40\1\0\7\40\1\0\7\40\1\0"+
    "\7\40\1\0\7\40\1\0\7\40\1\0\7\40\1\0"+
    "\7\40\120\0\1\40\325\0\2\40\52\0\5\40\5\0"+
    "\2\40\4\0\126\40\6\0\3\40\1\0\132\40\1\0"+
    "\4\40\5\0\53\40\1\0\136\40\21\0\33\40\65\0"+
    "\306\40\112\0\360\40\20\0\215\40\103\0\56\40\2\0"+
    "\15\40\3\0\20\40\12\110\2\40\24\0\57\40\20\0"+
    "\37\40\2\0\106\40\61\0\11\40\2\0\147\40\2\0"+
    "\65\40\2\0\5\40\60\0\13\40\1\0\3\40\1\0"+
    "\4\40\1\0\27\40\35\0\64\40\16\0\62\40\34\0"+
    "\12\110\30\0\6\40\3\0\1\40\1\0\2\40\1\0"+
    "\12\110\34\40\12\0\27\40\31\0\35\40\7\0\57\40"+
    "\34\0\1\40\12\110\6\0\5\40\1\0\12\40\12\110"+
    "\5\40\1\0\51\40\27\0\3\40\1\0\10\40\4\0"+
    "\12\110\6\0\27\40\3\0\1\40\3\0\62\40\1\0"+
    "\1\40\3\0\2\40\2\0\5\40\2\0\1\40\1\0"+
    "\1\40\30\0\3\40\2\0\13\40\7\0\3\40\14\0"+
    "\6\40\2\0\6\40\2\0\6\40\11\0\7\40\1\0"+
    "\7\40\1\0\53\40\1\0\14\40\10\0\163\40\15\0"+
    "\12\110\6\0\244\40\14\0\27\40\4\0\61\40\4\0"+
    "\156\40\2\0\152\40\46\0\7\40\14\0\5\40\5\0"+
    "\1\40\1\0\12\40\1\0\15\40\1\0\5\40\1\0"+
    "\1\40\1\0\2\40\1\0\2\40\1\0\154\40\41\0"+
    "\153\40\22\0\100\40\2\0\66\40\50\0\14\40\164\0"+
    "\5\40\1\0\207\40\23\0\12\110\7\0\32\40\6\0"+
    "\32\40\13\0\131\40\3\0\6\40\2\0\6\40\2\0"+
    "\6\40\2\0\3\40\43\0\14\40\1\0\32\40\1\0"+
    "\23\40\1\0\2\40\1\0\17\40\2\0\16\40\42\0"+
    "\173\40\205\0\35\40\3\0\61\40\57\0\40\40\15\0"+
    "\24\40\1\0\10\40\6\0\46\40\12\0\36\40\2\0"+
    "\44\40\4\0\10\40\60\0\236\40\2\0\12\110\6\0"+
    "\44\40\4\0\44\40\4\0\50\40\10\0\64\40\234\0"+
    "\67\40\11\0\26\40\12\0\10\40\230\0\6\40\2\0"+
    "\1\40\1\0\54\40\1\0\2\40\3\0\1\40\2\0"+
    "\27\40\12\0\27\40\11\0\37\40\101\0\23\40\1\0"+
    "\2\40\12\0\26\40\12\0\32\40\106\0\70\40\6\0"+
    "\2\40\100\0\1\40\17\0\4\40\1\0\3\40\1\0"+
    "\35\40\52\0\35\40\3\0\35\40\43\0\10\40\1\0"+
    "\34\40\33\0\66\40\12\0\26\40\12\0\23\40\15\0"+
    "\22\40\156\0\111\40\67\0\63\40\15\0\63\40\15\0"+
    "\44\40\14\0\12\110\306\0\35\40\12\0\1\40\10\0"+
    "\26\40\232\0\27\40\14\0\65\40\56\0\12\110\23\0"+
    "\55\40\40\0\31\40\7\0\12\110\11\0\44\40\17\0"+
    "\12\110\4\0\1\40\13\0\43\40\3\0\1\40\14\0"+
    "\60\40\16\0\4\40\13\0\12\110\1\40\1\0\1\40"+
    "\43\0\22\40\1\0\31\40\124\0\7\40\1\0\1\40"+
    "\1\0\4\40\1\0\17\40\1\0\12\40\7\0\57\40"+
    "\21\0\12\110\13\0\10\40\2\0\2\40\2\0\26\40"+
    "\1\0\7\40\1\0\2\40\1\0\5\40\3\0\1\40"+
    "\22\0\1\40\14\0\5\40\236\0\65\40\22\0\4\40"+
    "\5\0\12\110\5\0\1\40\40\0\60\40\24\0\2\40"+
    "\1\0\1\40\10\0\12\110\246\0\57\40\51\0\4\40"+
    "\44\0\60\40\24\0\1\40\13\0\12\110\46\0\53\40"+
    "\15\0\1\40\7\0\12\110\66\0\33\40\25\0\12\110"+
    "\306\0\54\40\164\0\100\40\12\110\25\0\1\40\240\0"+
    "\10\40\2\0\47\40\20\0\1\40\1\0\1\40\34\0"+
    "\1\40\12\0\50\40\7\0\1\40\25\0\1\40\13\0"+
    "\56\40\23\0\1\40\42\0\71\40\7\0\11\40\1\0"+
    "\45\40\21\0\1\40\17\0\12\110\30\0\36\40\160\0"+
    "\7\40\1\0\2\40\1\0\46\40\25\0\1\40\11\0"+
    "\12\110\6\0\6\40\1\0\2\40\1\0\40\40\16\0"+
    "\1\40\7\0\12\110\u0136\0\23\40\15\0\232\40\346\0"+
    "\304\40\274\0\57\40\321\0\107\40\271\0\71\40\7\0"+
    "\37\40\1\0\12\110\146\0\36\40\22\0\60\40\20\0"+
    "\4\40\14\0\12\110\11\0\25\40\5\0\23\40\260\0"+
    "\100\40\200\0\113\40\5\0\1\40\102\0\15\40\100\0"+
    "\2\40\1\0\1\40\34\0\370\40\10\0\363\40\15\0"+
    "\37\40\61\0\3\40\21\0\4\40\10\0\u018c\40\4\0"+
    "\153\40\5\0\15\40\3\0\11\40\7\0\12\40\146\0"+
    "\125\40\1\0\107\40\1\0\2\40\2\0\1\40\2\0"+
    "\2\40\2\0\4\40\1\0\14\40\1\0\1\40\1\0"+
    "\7\40\1\0\101\40\1\0\4\40\2\0\10\40\1\0"+
    "\7\40\1\0\34\40\1\0\4\40\1\0\5\40\1\0"+
    "\1\40\3\0\7\40\1\0\u0154\40\2\0\31\40\1\0"+
    "\31\40\1\0\37\40\1\0\31\40\1\0\37\40\1\0"+
    "\31\40\1\0\37\40\1\0\31\40\1\0\37\40\1\0"+
    "\31\40\1\0\10\40\2\0\62\110\55\40\12\0\7\40"+
    "\2\0\12\110\4\0\1\40\u0171\0\54\40\4\0\12\110"+
    "\6\0\305\40\73\0\104\40\7\0\1\40\4\0\12\110"+
    "\246\0\4\40\1\0\33\40\1\0\2\40\1\0\1\40"+
    "\2\0\1\40\1\0\12\40\1\0\4\40\1\0\1\40"+
    "\1\0\1\40\6\0\1\40\4\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\3\40\1\0\2\40\1\0\1\40"+
    "\2\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\2\40\1\0\1\40\2\0\4\40"+
    "\1\0\7\40\1\0\4\40\1\0\4\40\1\0\1\40"+
    "\1\0\12\40\1\0\21\40\5\0\3\40\1\0\5\40"+
    "\1\0\21\40\104\0\327\40\51\0\65\40\13\0\336\40"+
    "\2\0\u0182\40\16\0\u0131\40\37\0\36\40\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\22\23\1\24\1\25\1\26"+
    "\1\27\1\1\1\30\1\31\1\32\1\33\1\0\1\34"+
    "\1\0\1\35\1\0\1\36\1\37\2\0\1\40\1\41"+
    "\1\42\2\0\1\43\1\44\1\45\1\2\6\23\1\46"+
    "\3\23\1\47\3\23\1\50\2\23\1\51\4\23\1\52"+
    "\1\23\1\53\6\23\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\4\0\1\65\1\0\11\23"+
    "\1\66\4\23\1\67\4\23\1\70\7\23\1\71\4\23"+
    "\1\72\3\23\1\73\1\23\1\74\1\75\1\76\1\77"+
    "\1\2\5\23\1\100\12\23\1\101\4\23\1\102\7\23"+
    "\1\103\1\104\2\23\1\105\11\23\1\106\3\23\1\107"+
    "\1\110\5\23\1\111\1\112\4\23\1\113\6\23\1\114"+
    "\4\23\1\115\7\23\1\116\4\23\1\117\1\23\1\120"+
    "\1\23\1\121\2\23\1\122\1\23\1\123\1\23\1\124"+
    "\1\23\1\125\1\23\1\126\2\23\1\127\3\23\1\130"+
    "\2\23\1\131\1\132\1\133\5\23\1\134\1\23\1\135"+
    "\1\23\1\136\1\137\1\23\1\140\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\222\0\333\0\u0124\0\222\0\222"+
    "\0\u016d\0\u01b6\0\222\0\222\0\222\0\u01ff\0\222\0\u0248"+
    "\0\222\0\u0291\0\u02da\0\222\0\222\0\u0323\0\u036c\0\u03b5"+
    "\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd"+
    "\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845"+
    "\0\u088e\0\u08d7\0\222\0\222\0\222\0\222\0\u0920\0\222"+
    "\0\u0969\0\u09b2\0\222\0\u09fb\0\222\0\u0a44\0\222\0\u0a8d"+
    "\0\222\0\222\0\u0ad6\0\u0b1f\0\222\0\222\0\222\0\u0b68"+
    "\0\u0bb1\0\222\0\222\0\222\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5"+
    "\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d"+
    "\0\u0f66\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u111c\0\u1165"+
    "\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad"+
    "\0\u13f6\0\u143f\0\u1488\0\u14d1\0\222\0\222\0\222\0\222"+
    "\0\222\0\222\0\222\0\222\0\222\0\u151a\0\u1563\0\u15ac"+
    "\0\u15f5\0\u0b68\0\u163e\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab"+
    "\0\u17f4\0\u183d\0\u1886\0\u18cf\0\222\0\u1918\0\u1961\0\u19aa"+
    "\0\u19f3\0\222\0\u1a3c\0\u1a85\0\u1ace\0\u1b17\0\222\0\u1b60"+
    "\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16\0\222\0\u1d5f"+
    "\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u05b4"+
    "\0\u1fa7\0\222\0\222\0\222\0\222\0\u0bb1\0\u1ff0\0\u2039"+
    "\0\u2082\0\u20cb\0\u2114\0\u05b4\0\u215d\0\u21a6\0\u21ef\0\u2238"+
    "\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u23ee\0\u05b4\0\u2437"+
    "\0\u2480\0\u24c9\0\u2512\0\u05b4\0\u255b\0\u25a4\0\u25ed\0\u2636"+
    "\0\u267f\0\u26c8\0\u2711\0\u05b4\0\222\0\u275a\0\u27a3\0\u05b4"+
    "\0\u27ec\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u29eb"+
    "\0\u2a34\0\u05b4\0\u2a7d\0\u2ac6\0\u2b0f\0\u05b4\0\u05b4\0\u2b58"+
    "\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u05b4\0\u05b4\0\u2cc5\0\u2d0e"+
    "\0\u2d57\0\u2da0\0\u05b4\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d"+
    "\0\u2f56\0\u05b4\0\u2f9f\0\u2fe8\0\u3031\0\u307a\0\u05b4\0\u30c3"+
    "\0\u310c\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279\0\u05b4\0\u32c2"+
    "\0\u330b\0\u3354\0\u339d\0\u05b4\0\u33e6\0\u05b4\0\u342f\0\u05b4"+
    "\0\u3478\0\u34c1\0\u05b4\0\u350a\0\u05b4\0\u3553\0\u05b4\0\u359c"+
    "\0\u05b4\0\u35e5\0\u05b4\0\u362e\0\u3677\0\u05b4\0\u36c0\0\u3709"+
    "\0\u3752\0\u05b4\0\u379b\0\u37e4\0\u05b4\0\u05b4\0\u05b4\0\u382d"+
    "\0\u3876\0\u38bf\0\u3908\0\u3951\0\u05b4\0\u399a\0\u05b4\0\u39e3"+
    "\0\u05b4\0\u05b4\0\u3a2c\0\u05b4\0\u05b4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\3"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\37\1\43"+
    "\1\44\1\37\1\45\1\46\1\47\1\50\1\51\4\37"+
    "\1\56\1\57\1\60\1\3\2\61\1\62\1\61\1\62"+
    "\1\61\1\63\1\64\101\61\113\0\1\4\113\0\1\65"+
    "\3\0\1\66\16\0\1\67\55\0\1\70\13\0\1\71"+
    "\74\0\1\72\2\0\1\73\2\0\1\73\1\0\2\73"+
    "\1\74\2\73\3\0\74\73\16\0\1\75\11\0\1\76"+
    "\100\0\1\77\111\0\1\100\110\0\1\100\1\0\2\23"+
    "\63\0\1\23\20\0\1\101\7\0\1\102\110\0\1\103"+
    "\110\0\1\104\1\105\104\0\1\37\4\0\22\37\3\0"+
    "\17\37\1\106\1\107\5\37\31\0\1\37\4\0\22\37"+
    "\3\0\15\37\1\110\10\37\31\0\1\37\4\0\22\37"+
    "\3\0\1\111\14\37\1\112\10\37\31\0\1\37\4\0"+
    "\22\37\3\0\4\37\1\113\10\37\1\114\10\37\31\0"+
    "\1\37\4\0\22\37\3\0\14\37\1\115\3\37\1\116"+
    "\3\37\1\117\1\37\31\0\1\37\4\0\22\37\3\0"+
    "\1\120\25\37\31\0\1\37\4\0\22\37\3\0\26\37"+
    "\31\0\1\37\4\0\22\37\3\0\1\121\25\37\31\0"+
    "\1\37\4\0\22\37\3\0\13\37\1\122\12\37\31\0"+
    "\1\37\4\0\22\37\3\0\4\37\1\123\21\37\31\0"+
    "\1\37\4\0\22\37\3\0\1\124\14\37\1\125\10\37"+
    "\31\0\1\37\4\0\22\37\3\0\4\37\1\126\3\37"+
    "\1\127\15\37\31\0\1\37\4\0\22\37\3\0\17\37"+
    "\1\130\6\37\31\0\1\37\4\0\22\37\3\0\1\131"+
    "\7\37\1\132\6\37\1\133\6\37\31\0\1\37\4\0"+
    "\22\37\3\0\4\37\1\134\21\37\31\0\1\37\4\0"+
    "\22\37\3\0\1\135\7\37\1\136\4\37\1\137\4\37"+
    "\1\140\1\141\2\37\31\0\1\37\4\0\22\37\3\0"+
    "\17\37\1\142\6\37\31\0\1\37\4\0\22\37\3\0"+
    "\1\143\3\37\1\144\21\37\112\0\1\145\2\0\2\61"+
    "\1\0\1\61\1\0\1\61\2\0\101\61\2\0\1\62"+
    "\1\0\1\62\112\0\1\146\1\147\63\0\1\150\2\0"+
    "\1\151\1\0\1\152\21\0\1\153\205\0\1\154\14\0"+
    "\1\155\105\0\1\156\2\0\1\157\60\0\1\160\4\0"+
    "\1\161\33\0\2\162\63\0\1\162\20\101\1\163\70\101"+
    "\2\105\1\0\1\105\1\0\104\105\25\0\1\37\4\0"+
    "\22\37\3\0\17\37\1\164\6\37\31\0\1\37\4\0"+
    "\22\37\3\0\2\37\1\165\23\37\31\0\1\37\4\0"+
    "\22\37\3\0\15\37\1\166\10\37\31\0\1\37\4\0"+
    "\22\37\3\0\3\37\1\167\13\37\1\170\1\171\5\37"+
    "\31\0\1\37\4\0\22\37\3\0\14\37\1\172\11\37"+
    "\31\0\1\37\4\0\22\37\3\0\5\37\1\173\12\37"+
    "\1\174\5\37\13\0\1\175\15\0\1\37\4\0\22\37"+
    "\3\0\1\37\1\176\24\37\31\0\1\37\4\0\22\37"+
    "\3\0\21\37\1\177\4\37\31\0\1\37\4\0\22\37"+
    "\3\0\16\37\1\200\7\37\31\0\1\37\4\0\22\37"+
    "\3\0\21\37\1\201\4\37\13\0\1\202\15\0\1\37"+
    "\4\0\22\37\3\0\12\37\1\203\13\37\31\0\1\37"+
    "\4\0\22\37\3\0\2\37\1\204\23\37\31\0\1\37"+
    "\4\0\22\37\3\0\16\37\1\205\7\37\31\0\1\37"+
    "\4\0\22\37\3\0\4\37\1\206\21\37\13\0\1\207"+
    "\15\0\1\37\4\0\22\37\3\0\26\37\31\0\1\37"+
    "\4\0\22\37\3\0\14\37\1\210\11\37\31\0\1\37"+
    "\4\0\22\37\3\0\14\37\1\211\11\37\31\0\1\37"+
    "\4\0\22\37\3\0\4\37\1\212\21\37\31\0\1\37"+
    "\4\0\22\37\3\0\3\37\1\213\22\37\31\0\1\37"+
    "\4\0\22\37\3\0\17\37\1\214\6\37\31\0\1\37"+
    "\4\0\22\37\3\0\20\37\1\215\5\37\31\0\1\37"+
    "\4\0\22\37\3\0\10\37\1\216\15\37\13\0\1\217"+
    "\15\0\1\37\4\0\22\37\3\0\16\37\1\220\2\37"+
    "\1\221\4\37\31\0\1\37\4\0\22\37\3\0\12\37"+
    "\1\222\13\37\31\0\1\37\4\0\22\37\3\0\14\37"+
    "\1\223\11\37\31\0\1\37\4\0\22\37\3\0\12\37"+
    "\1\224\13\37\31\0\1\37\4\0\22\37\3\0\13\37"+
    "\1\225\12\37\31\0\1\37\4\0\22\37\3\0\10\37"+
    "\1\226\15\37\31\0\1\37\4\0\22\37\3\0\22\37"+
    "\1\227\3\37\31\0\1\37\4\0\22\37\3\0\17\37"+
    "\1\230\6\37\31\0\1\37\4\0\22\37\3\0\17\37"+
    "\1\231\6\37\16\0\1\232\110\0\1\233\110\0\1\234"+
    "\110\0\1\235\76\0\20\101\1\163\10\101\1\236\57\101"+
    "\25\0\1\37\4\0\22\37\3\0\4\37\1\237\21\37"+
    "\31\0\1\37\4\0\22\37\3\0\4\37\1\240\21\37"+
    "\31\0\1\37\4\0\22\37\3\0\12\37\1\241\13\37"+
    "\31\0\1\37\4\0\22\37\3\0\4\37\1\242\21\37"+
    "\31\0\1\37\4\0\22\37\3\0\1\243\25\37\31\0"+
    "\1\37\4\0\22\37\3\0\15\37\1\244\10\37\31\0"+
    "\1\37\4\0\22\37\3\0\21\37\1\245\4\37\31\0"+
    "\1\37\4\0\22\37\3\0\1\246\25\37\31\0\1\37"+
    "\4\0\22\37\3\0\2\37\1\247\23\37\31\0\1\37"+
    "\4\0\22\37\3\0\12\37\1\250\13\37\31\0\1\37"+
    "\4\0\22\37\3\0\4\37\1\251\21\37\31\0\1\37"+
    "\4\0\22\37\3\0\4\37\1\252\21\37\31\0\1\37"+
    "\4\0\22\37\3\0\10\37\1\253\15\37\31\0\1\37"+
    "\4\0\22\37\3\0\20\37\1\254\5\37\31\0\1\37"+
    "\4\0\22\37\3\0\4\37\1\255\21\37\31\0\1\37"+
    "\4\0\22\37\3\0\1\256\25\37\31\0\1\37\4\0"+
    "\22\37\3\0\16\37\1\257\7\37\31\0\1\37\4\0"+
    "\22\37\3\0\6\37\1\260\17\37\31\0\1\37\4\0"+
    "\22\37\3\0\20\37\1\261\5\37\31\0\1\37\4\0"+
    "\22\37\3\0\14\37\1\262\11\37\31\0\1\37\4\0"+
    "\22\37\3\0\4\37\1\263\21\37\31\0\1\37\4\0"+
    "\22\37\3\0\1\264\3\37\1\265\21\37\31\0\1\37"+
    "\4\0\22\37\3\0\21\37\1\266\4\37\31\0\1\37"+
    "\4\0\22\37\3\0\13\37\1\267\1\270\11\37\31\0"+
    "\1\37\4\0\22\37\3\0\17\37\1\271\6\37\31\0"+
    "\1\37\4\0\22\37\3\0\15\37\1\272\10\37\31\0"+
    "\1\37\4\0\22\37\3\0\10\37\1\273\15\37\31\0"+
    "\1\37\4\0\22\37\3\0\15\37\1\274\10\37\13\0"+
    "\1\275\15\0\1\37\4\0\22\37\3\0\26\37\31\0"+
    "\1\37\4\0\22\37\3\0\1\276\25\37\31\0\1\37"+
    "\4\0\22\37\3\0\21\37\1\277\4\37\31\0\1\37"+
    "\4\0\22\37\3\0\4\37\1\300\21\37\31\0\1\37"+
    "\4\0\22\37\3\0\3\37\1\301\22\37\31\0\1\37"+
    "\4\0\22\37\3\0\6\37\1\302\17\37\31\0\1\37"+
    "\4\0\22\37\3\0\14\37\1\303\11\37\31\0\1\37"+
    "\4\0\22\37\3\0\4\37\1\304\21\37\31\0\1\37"+
    "\4\0\22\37\3\0\14\37\1\305\11\37\31\0\1\37"+
    "\4\0\22\37\3\0\2\37\1\306\23\37\31\0\1\37"+
    "\4\0\22\37\3\0\10\37\1\307\15\37\31\0\1\37"+
    "\4\0\22\37\3\0\22\37\1\310\3\37\31\0\1\37"+
    "\4\0\22\37\3\0\4\37\1\311\21\37\31\0\1\37"+
    "\4\0\22\37\3\0\4\37\1\312\21\37\31\0\1\37"+
    "\4\0\22\37\3\0\17\37\1\313\6\37\31\0\1\37"+
    "\4\0\22\37\3\0\17\37\1\314\6\37\31\0\1\37"+
    "\4\0\22\37\3\0\4\37\1\315\21\37\31\0\1\37"+
    "\4\0\22\37\3\0\4\37\1\316\10\37\1\316\10\37"+
    "\31\0\1\37\4\0\22\37\3\0\17\37\1\317\6\37"+
    "\31\0\1\37\4\0\22\37\3\0\17\37\1\320\6\37"+
    "\31\0\1\37\4\0\22\37\3\0\10\37\1\321\15\37"+
    "\31\0\1\37\4\0\22\37\3\0\1\322\25\37\31\0"+
    "\1\37\4\0\22\37\3\0\21\37\1\323\4\37\31\0"+
    "\1\37\4\0\22\37\3\0\14\37\1\324\11\37\31\0"+
    "\1\37\4\0\22\37\3\0\20\37\1\325\5\37\31\0"+
    "\1\37\4\0\22\37\3\0\1\326\25\37\31\0\1\37"+
    "\4\0\22\37\3\0\15\37\1\327\10\37\31\0\1\37"+
    "\4\0\22\37\3\0\2\37\1\330\23\37\31\0\1\37"+
    "\4\0\22\37\3\0\15\37\1\331\10\37\31\0\1\37"+
    "\4\0\22\37\3\0\17\37\1\332\6\37\31\0\1\37"+
    "\4\0\22\37\3\0\17\37\1\333\6\37\31\0\1\37"+
    "\4\0\22\37\3\0\17\37\1\334\6\37\31\0\1\37"+
    "\4\0\22\37\3\0\2\37\1\335\23\37\31\0\1\37"+
    "\4\0\22\37\3\0\1\336\25\37\31\0\1\37\4\0"+
    "\22\37\3\0\12\37\1\337\13\37\31\0\1\37\4\0"+
    "\22\37\3\0\3\37\1\340\22\37\31\0\1\37\4\0"+
    "\22\37\3\0\1\341\25\37\31\0\1\37\4\0\22\37"+
    "\3\0\1\342\25\37\31\0\1\37\4\0\22\37\3\0"+
    "\21\37\1\343\4\37\31\0\1\37\4\0\22\37\3\0"+
    "\14\37\1\344\11\37\31\0\1\37\4\0\22\37\3\0"+
    "\12\37\1\345\13\37\31\0\1\37\4\0\22\37\3\0"+
    "\14\37\1\346\11\37\31\0\1\37\4\0\22\37\3\0"+
    "\15\37\1\347\10\37\31\0\1\37\4\0\22\37\3\0"+
    "\1\350\25\37\31\0\1\37\4\0\22\37\3\0\14\37"+
    "\1\351\11\37\31\0\1\37\4\0\22\37\3\0\4\37"+
    "\1\352\21\37\31\0\1\37\4\0\22\37\3\0\21\37"+
    "\1\353\4\37\31\0\1\37\4\0\22\37\3\0\11\37"+
    "\1\354\14\37\31\0\1\37\4\0\22\37\3\0\17\37"+
    "\1\355\6\37\31\0\1\37\4\0\22\37\3\0\1\356"+
    "\25\37\31\0\1\37\4\0\22\37\3\0\20\37\1\357"+
    "\5\37\31\0\1\37\4\0\22\37\3\0\10\37\1\360"+
    "\15\37\31\0\1\37\4\0\22\37\3\0\3\37\1\361"+
    "\22\37\31\0\1\37\4\0\22\37\3\0\14\37\1\362"+
    "\11\37\31\0\1\37\4\0\22\37\3\0\10\37\1\363"+
    "\15\37\31\0\1\37\4\0\22\37\3\0\7\37\1\364"+
    "\16\37\31\0\1\37\4\0\22\37\3\0\3\37\1\365"+
    "\22\37\31\0\1\37\4\0\22\37\3\0\15\37\1\366"+
    "\10\37\31\0\1\37\4\0\22\37\3\0\4\37\1\367"+
    "\21\37\31\0\1\37\4\0\22\37\3\0\14\37\1\370"+
    "\11\37\31\0\1\37\4\0\22\37\3\0\4\37\1\371"+
    "\21\37\31\0\1\37\4\0\22\37\3\0\22\37\1\372"+
    "\3\37\31\0\1\37\4\0\22\37\3\0\21\37\1\373"+
    "\4\37\31\0\1\37\4\0\22\37\3\0\3\37\1\374"+
    "\22\37\31\0\1\37\4\0\22\37\3\0\17\37\1\375"+
    "\6\37\31\0\1\37\4\0\22\37\3\0\3\37\1\376"+
    "\22\37\31\0\1\37\4\0\22\37\3\0\20\37\1\377"+
    "\5\37\31\0\1\37\4\0\22\37\3\0\22\37\1\u0100"+
    "\3\37\31\0\1\37\4\0\22\37\3\0\4\37\1\u0101"+
    "\21\37\31\0\1\37\4\0\22\37\3\0\1\u0102\25\37"+
    "\31\0\1\37\4\0\22\37\3\0\17\37\1\u0103\6\37"+
    "\31\0\1\37\4\0\22\37\3\0\16\37\1\u0104\7\37"+
    "\31\0\1\37\4\0\22\37\3\0\22\37\1\u0105\3\37"+
    "\31\0\1\37\4\0\22\37\3\0\1\u0106\25\37\31\0"+
    "\1\37\4\0\22\37\3\0\25\37\1\u0107\31\0\1\37"+
    "\4\0\22\37\3\0\4\37\1\u0108\21\37\31\0\1\37"+
    "\4\0\22\37\3\0\14\37\1\u0109\11\37\31\0\1\37"+
    "\4\0\22\37\3\0\17\37\1\u010a\6\37\31\0\1\37"+
    "\4\0\22\37\3\0\1\u010b\25\37\31\0\1\37\4\0"+
    "\22\37\3\0\4\37\1\u010c\21\37\31\0\1\37\4\0"+
    "\22\37\3\0\4\37\1\u010d\21\37\31\0\1\37\4\0"+
    "\22\37\3\0\3\37\1\u010e\22\37\31\0\1\37\4\0"+
    "\22\37\3\0\20\37\1\u010f\5\37\31\0\1\37\4\0"+
    "\22\37\3\0\1\u0110\25\37\31\0\1\37\4\0\22\37"+
    "\3\0\2\37\1\u0111\23\37\31\0\1\37\4\0\22\37"+
    "\3\0\1\u0112\25\37\31\0\1\37\4\0\22\37\3\0"+
    "\17\37\1\u0113\6\37\31\0\1\37\4\0\22\37\3\0"+
    "\21\37\1\u0114\4\37\31\0\1\37\4\0\22\37\3\0"+
    "\17\37\1\u0115\6\37\31\0\1\37\4\0\22\37\3\0"+
    "\14\37\1\u0116\11\37\31\0\1\37\4\0\22\37\3\0"+
    "\12\37\1\u0117\13\37\31\0\1\37\4\0\22\37\3\0"+
    "\10\37\1\u0118\15\37\31\0\1\37\4\0\22\37\3\0"+
    "\17\37\1\u0119\6\37\31\0\1\37\4\0\22\37\3\0"+
    "\15\37\1\300\10\37\31\0\1\37\4\0\22\37\3\0"+
    "\4\37\1\u011a\21\37\31\0\1\37\4\0\22\37\3\0"+
    "\21\37\1\u011b\4\37\31\0\1\37\4\0\22\37\3\0"+
    "\17\37\1\u011c\6\37\31\0\1\37\4\0\22\37\3\0"+
    "\4\37\1\u011d\21\37\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14965];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\2\11\2\1\3\11\1\1\1\11"+
    "\1\1\1\11\2\1\2\11\25\1\4\11\1\1\1\11"+
    "\2\1\1\11\1\0\1\11\1\0\1\11\1\0\2\11"+
    "\2\0\3\11\2\0\3\11\40\1\11\11\4\0\1\1"+
    "\1\0\11\1\1\11\4\1\1\11\4\1\1\11\7\1"+
    "\1\11\12\1\4\11\37\1\1\11\140\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private LinkedList<MError> lexicalErrors = new LinkedList();
    private LinkedList<MError> semanticErrors = new LinkedList();
    private StringBuffer string = new StringBuffer();
    private StringBuffer errorLexeme = new StringBuffer();
    private int errorLine = 0;
    private int errorColumn = 0;
    private Symbol symbol;
    
    private Symbol createToken(String name, int type, Object lexeme){
        symbol = new Symbol(type, yyline+1, yycolumn, lexeme);
        printToken(name);
        verifyLexicalError();
        return symbol;
    }

    private Symbol createToken(String name, int type){
        symbol = new Symbol(type, yyline+1, yycolumn);
        printToken(name);
        verifyLexicalError();
        return symbol;
    }

    public LinkedList<MError> getLexicalErrors(){
        return lexicalErrors;
    }

    public LinkedList<MError> getSemanticErrors(){
        return semanticErrors;
    }
    
    private void printToken(String token){
        System.out.println(token);
    }

    private void addSemanticError(MError error){
        semanticErrors.add(error);
    }

    private void addLexicalError(MError error){
        lexicalErrors.add(error);
    }

    private void verifyLexicalError(){
        if(errorLexeme.length() != 0){
            addLexicalError(new MError("Lexema no reconocido.", errorLexeme.toString(), errorLine, errorColumn-errorLexeme.length()));
            errorLexeme.setLength(0);
        }
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TrackLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              verifyLexicalError(); return new Symbol(TrackSymbol.EOF);
            }  // fall though
            case 286: break;
            case STRING: {
              yybegin(YYINITIAL); addLexicalError(new MError("Se alcanzo el final del archivo mientras se leia una CADENA.", string.toString(), yyline+1, yycolumn));
            }  // fall though
            case 287: break;
            default:
          { return new java_cup.runtime.Symbol(TrackSymbol.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { errorLexeme.append(yytext()); errorLine = yyline+1; errorColumn = yycolumn+1;
            }
            // fall through
          case 98: break;
          case 2:
            { verifyLexicalError();
            }
            // fall through
          case 99: break;
          case 3:
            { return createToken("NOT", TrackSymbol.NOT);
            }
            // fall through
          case 100: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 101: break;
          case 5:
            { return createToken("MOD", TrackSymbol.MOD);
            }
            // fall through
          case 102: break;
          case 6:
            { return createToken("PARENTHESISO", TrackSymbol.PARENTHESISO);
            }
            // fall through
          case 103: break;
          case 7:
            { return createToken("PARENTHESISC", TrackSymbol.PARENTHESISC);
            }
            // fall through
          case 104: break;
          case 8:
            { return createToken("ASTERISK", TrackSymbol.ASTERISK);
            }
            // fall through
          case 105: break;
          case 9:
            { return createToken("PLUS", TrackSymbol.PLUS);
            }
            // fall through
          case 106: break;
          case 10:
            { return createToken("COMMA", TrackSymbol.COMMA);
            }
            // fall through
          case 107: break;
          case 11:
            { return createToken("MINUS", TrackSymbol.MINUS);
            }
            // fall through
          case 108: break;
          case 12:
            { return createToken("SLASH", TrackSymbol.SLASH);
            }
            // fall through
          case 109: break;
          case 13:
            { if(yytext().length() > 9){
                                                                        addSemanticError(new MError("El tamaño del ENTERO execede el limite permitido (9 cifras).", yytext(), yyline+1, yycolumn));
                                                                        return createToken("INTEGER", TrackSymbol.INTEGER, Integer.parseInt(yytext().substring(0,8)));
                                                                    } else{
                                                                        return createToken("INTEGER", TrackSymbol.INTEGER, Integer.parseInt(yytext())); 
                                                                    }
            }
            // fall through
          case 110: break;
          case 14:
            { return createToken("COLON", TrackSymbol.COLON);
            }
            // fall through
          case 111: break;
          case 15:
            { return createToken("SEMICOLON", TrackSymbol.SEMICOLON);
            }
            // fall through
          case 112: break;
          case 16:
            { return createToken("LESSTHAN", TrackSymbol.LESSTHAN);
            }
            // fall through
          case 113: break;
          case 17:
            { return createToken("EQUAL", TrackSymbol.EQUAL);
            }
            // fall through
          case 114: break;
          case 18:
            { return createToken("GREATERTHAN", TrackSymbol.GREATERTHAN);
            }
            // fall through
          case 115: break;
          case 19:
            { return createToken("ID", TrackSymbol.ID, yytext());
            }
            // fall through
          case 116: break;
          case 20:
            { return createToken("SQUAREBRACKETO", TrackSymbol.SQUAREBRACKETO);
            }
            // fall through
          case 117: break;
          case 21:
            { return createToken("SQUAREBRACKETC", TrackSymbol.SQUAREBRACKETC);
            }
            // fall through
          case 118: break;
          case 22:
            { return createToken("POWER", TrackSymbol.POWER);
            }
            // fall through
          case 119: break;
          case 23:
            { return createToken("CURLYBRACKETO", TrackSymbol.CURLYBRACKETO);
            }
            // fall through
          case 120: break;
          case 24:
            { return createToken("CURLYBRACKETC", TrackSymbol.CURLYBRACKETO);
            }
            // fall through
          case 121: break;
          case 25:
            { string.append( yytext() );
            }
            // fall through
          case 122: break;
          case 26:
            { addLexicalError(new MError("No se permiten saltos de linea dento de una CADENA.", string.toString(), yyline+1, yycolumn));
            }
            // fall through
          case 123: break;
          case 27:
            { yybegin(YYINITIAL); return createToken("STRING", TrackSymbol.STRING, string.toString());
            }
            // fall through
          case 124: break;
          case 28:
            { return createToken("ISNULL", TrackSymbol.ISNULL);
            }
            // fall through
          case 125: break;
          case 29:
            { return createToken("NOTEQUAL", TrackSymbol.NOTEQUAL);
            }
            // fall through
          case 126: break;
          case 30:
            { return createToken("AND", TrackSymbol.AND);
            }
            // fall through
          case 127: break;
          case 31:
            { return createToken("XOR", TrackSymbol.XOR);
            }
            // fall through
          case 128: break;
          case 32:
            { return createToken("INCREMENT", TrackSymbol.INCREMENT);
            }
            // fall through
          case 129: break;
          case 33:
            { return createToken("INCREMENTANDASSIGMENT", TrackSymbol.INCREMENTANDASSIGMENT);
            }
            // fall through
          case 130: break;
          case 34:
            { return createToken("DECREMENT", TrackSymbol.DECREMENT);
            }
            // fall through
          case 131: break;
          case 35:
            { return createToken("LESSTHANOREQUALTO", TrackSymbol.LESSTHANOREQUALTO);
            }
            // fall through
          case 132: break;
          case 36:
            { return createToken("ISEQUAL", TrackSymbol.ISEQUAL);
            }
            // fall through
          case 133: break;
          case 37:
            { return createToken("GREATERTHANOREQUALTO", TrackSymbol.GREATERTHANOREQUALTO);
            }
            // fall through
          case 134: break;
          case 38:
            { return createToken("C", TrackSymbol.C);
            }
            // fall through
          case 135: break;
          case 39:
            { return createToken("F", TrackSymbol.F);
            }
            // fall through
          case 136: break;
          case 40:
            { return createToken("A", TrackSymbol.A);
            }
            // fall through
          case 137: break;
          case 41:
            { return createToken("E", TrackSymbol.E);
            }
            // fall through
          case 138: break;
          case 42:
            { return createToken("D", TrackSymbol.D);
            }
            // fall through
          case 139: break;
          case 43:
            { return createToken("IF", TrackSymbol.IF);
            }
            // fall through
          case 140: break;
          case 44:
            { return createToken("OR", TrackSymbol.OR);
            }
            // fall through
          case 141: break;
          case 45:
            { string.append('\"');
            }
            // fall through
          case 142: break;
          case 46:
            { string.append('#');
            }
            // fall through
          case 143: break;
          case 47:
            { string.append('\n');
            }
            // fall through
          case 144: break;
          case 48:
            { string.append('\r');
            }
            // fall through
          case 145: break;
          case 49:
            { string.append('\t');
            }
            // fall through
          case 146: break;
          case 50:
            { return createToken("NAND", TrackSymbol.NAND);
            }
            // fall through
          case 147: break;
          case 51:
            { return createToken("NOR", TrackSymbol.NOR);
            }
            // fall through
          case 148: break;
          case 52:
            { return createToken("CHARACTER", TrackSymbol.CHARACTER, (Character)yytext().charAt(1));
            }
            // fall through
          case 149: break;
          case 53:
            { if(yytext().split("\\.")[1].length() > 6){
                                                                        addSemanticError(new MError("El tamaño del DOBLE execede el limite permitido (6 cifras despues del punto).", yytext(), yyline+1, yycolumn));
                                                                        return createToken("DOUBLE", TrackSymbol.DOUBLE, Double.valueOf(yytext().substring(0, yytext().indexOf('.')+6)));
                                                                    } else{
                                                                        return createToken("DOUBLE", TrackSymbol.DOUBLE, Double.valueOf(yytext()));
                                                                    }
            }
            // fall through
          case 150: break;
          case 54:
            { return createToken("C8", TrackSymbol.C8);
            }
            // fall through
          case 151: break;
          case 55:
            { return createToken("F8", TrackSymbol.F8);
            }
            // fall through
          case 152: break;
          case 56:
            { return createToken("A8", TrackSymbol.A8);
            }
            // fall through
          case 153: break;
          case 57:
            { return createToken("D8", TrackSymbol.D8);
            }
            // fall through
          case 154: break;
          case 58:
            { return createToken("G", TrackSymbol.G);
            }
            // fall through
          case 155: break;
          case 59:
            { return createToken("VAR", TrackSymbol.VAR);
            }
            // fall through
          case 156: break;
          case 60:
            { return createToken("CHARACTER", TrackSymbol.CHARACTER, (Character)'#');
            }
            // fall through
          case 157: break;
          case 61:
            { return createToken("CHARACTER", TrackSymbol.CHARACTER, (Character)'\'');
            }
            // fall through
          case 158: break;
          case 62:
            { return createToken("CHARACTER", TrackSymbol.CHARACTER, (Character)'\n');
            }
            // fall through
          case 159: break;
          case 63:
            { return createToken("CHARACTER", TrackSymbol.CHARACTER, (Character)'\t');
            }
            // fall through
          case 160: break;
          case 64:
            { return createToken("CASE", TrackSymbol.CASE);
            }
            // fall through
          case 161: break;
          case 65:
            { return createToken("KEEP", TrackSymbol.KEEP);
            }
            // fall through
          case 162: break;
          case 66:
            { return createToken("FOR", TrackSymbol.FOR);
            }
            // fall through
          case 163: break;
          case 67:
            { return createToken("ELSE", TrackSymbol.ELSE);
            }
            // fall through
          case 164: break;
          case 68:
            { return createToken("G8", TrackSymbol.G8);
            }
            // fall through
          case 165: break;
          case 69:
            { return createToken("TRUE", TrackSymbol.TRUE, yytext());
            }
            // fall through
          case 166: break;
          case 70:
            { return createToken("DOUBLETYPE", TrackSymbol.DOUBLETYPE);
            }
            // fall through
          case 167: break;
          case 71:
            { return createToken("FALSE", TrackSymbol.FALSE, yytext());
            }
            // fall through
          case 168: break;
          case 72:
            { return createToken("DO", TrackSymbol.DO);
            }
            // fall through
          case 169: break;
          case 73:
            { return createToken("EVEN", TrackSymbol.EVEN);
            }
            // fall through
          case 170: break;
          case 74:
            { return createToken("TRACK", TrackSymbol.TRACK);
            }
            // fall through
          case 171: break;
          case 75:
            { return createToken("BREAK", TrackSymbol.BREAK);
            }
            // fall through
          case 172: break;
          case 76:
            { return createToken("STRINGTYPE", TrackSymbol.STRINGTYPE);
            }
            // fall through
          case 173: break;
          case 77:
            { return createToken("INTEGERTYPE", TrackSymbol.INTEGERTYPE);
            }
            // fall through
          case 174: break;
          case 78:
            { return createToken("PRIME", TrackSymbol.PRIME);
            }
            // fall through
          case 175: break;
          case 79:
            { return createToken("SWITCH", TrackSymbol.SWITCH);
            }
            // fall through
          case 176: break;
          case 80:
            { return createToken("ARRAY", TrackSymbol.ARRAY);
            }
            // fall through
          case 177: break;
          case 81:
            { return createToken("BOOLEANTYPE", TrackSymbol.BOOLEANTYPE);
            }
            // fall through
          case 178: break;
          case 82:
            { return createToken("DEFAULT", TrackSymbol.DEFAULT);
            }
            // fall through
          case 179: break;
          case 83:
            { return createToken("WAIT", TrackSymbol.WAIT);
            }
            // fall through
          case 180: break;
          case 84:
            { return createToken("ODD", TrackSymbol.ODD);
            }
            // fall through
          case 181: break;
          case 85:
            { return createToken("MESSAGE", TrackSymbol.MESSAGE);
            }
            // fall through
          case 182: break;
          case 86:
            { return createToken("ORDER", TrackSymbol.ORDER);
            }
            // fall through
          case 183: break;
          case 87:
            { return createToken("RETURN", TrackSymbol.RETURN);
            }
            // fall through
          case 184: break;
          case 88:
            { return createToken("CHARACTERTYPE", TrackSymbol.CHARACTERTYPE);
            }
            // fall through
          case 185: break;
          case 89:
            { return createToken("EXTENDS", TrackSymbol.EXTENDS);
            }
            // fall through
          case 186: break;
          case 90:
            { return createToken("LENGTH", TrackSymbol.LENGTH);
            }
            // fall through
          case 187: break;
          case 91:
            { return createToken("WHILE", TrackSymbol.WHILE);
            }
            // fall through
          case 188: break;
          case 92:
            { return createToken("CONTINUE", TrackSymbol.CONTINUE);
            }
            // fall through
          case 189: break;
          case 93:
            { return createToken("MAIN", TrackSymbol.MAIN);
            }
            // fall through
          case 190: break;
          case 94:
            { return createToken("SUMMARIZE", TrackSymbol.SUMMARIZE);
            }
            // fall through
          case 191: break;
          case 95:
            { return createToken("ASCENDENT", TrackSymbol.ASCENDENT);
            }
            // fall through
          case 192: break;
          case 96:
            { return createToken("PLAY", TrackSymbol.PLAY);
            }
            // fall through
          case 193: break;
          case 97:
            { return createToken("DESCENDENT", TrackSymbol.DESCENDENT);
            }
            // fall through
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
