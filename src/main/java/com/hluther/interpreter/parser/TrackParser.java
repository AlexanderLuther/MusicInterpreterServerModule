
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.hluther.interpreter.parser;

import com.hluther.interpreter.lexer.TrackLexer;
import java.util.LinkedList;
import com.hluther.entity.MError;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class TrackParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TrackSymbol.class;
}

  /** Default constructor. */
  @Deprecated
  public TrackParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public TrackParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TrackParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\023\003\000\002\012" +
    "\010\000\002\012\007\000\002\012\004\000\002\012\004" +
    "\000\002\013\004\000\002\013\003\000\002\014\005\000" +
    "\002\014\003\000\002\014\004\000\002\015\006\000\002" +
    "\015\006\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\004\000\002\015\002\000\002\017\005" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\005\000\002" +
    "\021\003\000\002\021\003\000\002\022\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\004\000\002\024\004" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\003\000\002\003\004\000\002\003\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\003\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\010\004\000\002\010\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\003\006\007\005\001\002\000\004\002" +
    "\000\001\002\000\004\005\013\001\002\000\010\003\006" +
    "\007\005\114\012\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\004\002\ufffd\001\002\000\004" +
    "\002\ufffc\001\002\000\010\003\015\010\014\114\016\001" +
    "\002\000\006\003\162\005\161\001\002\000\004\114\ufffa" +
    "\001\002\000\014\003\021\005\ufff0\011\ufff0\012\ufff0\115" +
    "\ufff0\001\002\000\004\114\020\001\002\000\014\003\021" +
    "\005\ufff0\011\ufff0\012\ufff0\115\ufff0\001\002\000\004\123" +
    "\156\001\002\000\012\005\024\011\027\012\023\115\030" +
    "\001\002\000\014\013\144\014\150\015\147\016\146\017" +
    "\145\001\002\000\012\111\140\112\135\113\136\122\137" +
    "\001\002\000\004\123\134\001\002\000\006\122\037\123" +
    "\133\001\002\000\004\012\023\001\002\000\004\002\uffff" +
    "\001\002\000\004\123\032\001\002\000\012\005\ufff3\011" +
    "\ufff3\012\ufff3\115\ufff3\001\002\000\006\122\037\123\036" +
    "\001\002\000\004\123\035\001\002\000\012\005\ufff5\011" +
    "\ufff5\012\ufff5\115\ufff5\001\002\000\012\005\ufff6\011\ufff6" +
    "\012\ufff6\115\ufff6\001\002\000\030\004\052\005\050\006" +
    "\051\063\062\064\056\065\042\074\057\102\045\103\041" +
    "\104\055\120\040\001\002\000\030\004\052\005\050\006" +
    "\051\063\062\064\056\065\042\074\057\102\045\103\041" +
    "\104\055\120\040\001\002\000\020\004\052\005\050\006" +
    "\051\063\062\064\056\065\042\120\040\001\002\000\050" +
    "\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\075" +
    "\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\103\uffd4\104\uffd4" +
    "\105\uffd4\106\uffd4\107\uffd4\110\uffd4\121\uffd4\123\uffd4\001" +
    "\002\000\012\077\124\100\122\101\123\123\uffe6\001\002" +
    "\000\020\075\117\076\116\077\uffc5\100\uffc5\101\uffc5\121" +
    "\uffc5\123\uffc5\001\002\000\026\004\052\005\050\006\051" +
    "\063\062\064\056\065\042\074\057\103\041\104\055\120" +
    "\040\001\002\000\050\066\uffd8\067\uffd8\070\uffd8\071\uffd8" +
    "\072\uffd8\073\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101" +
    "\uffd8\103\uffd8\104\uffd8\105\uffd8\106\uffd8\107\uffd8\110\uffd8" +
    "\121\uffd8\123\uffd8\001\002\000\020\075\uffc0\076\uffc0\077" +
    "\uffc0\100\uffc0\101\uffc0\121\uffc0\123\uffc0\001\002\000\050" +
    "\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\075" +
    "\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\103\uffd2\104\uffd2" +
    "\105\uffd2\106\uffd2\107\uffd2\110\uffd2\121\uffd2\123\uffd2\001" +
    "\002\000\050\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3" +
    "\073\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\103" +
    "\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\110\uffd3\121\uffd3" +
    "\123\uffd3\001\002\000\050\066\uffd1\067\uffd1\070\uffd1\071" +
    "\uffd1\072\uffd1\073\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1" +
    "\101\uffd1\103\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1\110" +
    "\uffd1\121\uffd1\123\uffd1\001\002\000\050\066\uffdb\067\uffdb" +
    "\070\uffdb\071\uffdb\072\uffdb\073\uffdb\075\uffdb\076\uffdb\077" +
    "\uffdb\100\uffdb\101\uffdb\103\uffdb\104\uffdb\105\uffdb\106\uffdb" +
    "\107\uffdb\110\uffdb\121\uffdb\123\uffdb\001\002\000\050\066" +
    "\072\067\067\070\076\071\074\072\075\073\100\075\uffc9" +
    "\076\uffc9\077\uffc9\100\uffc9\101\uffc9\103\071\104\065\105" +
    "\073\106\066\107\070\110\077\121\uffc9\123\uffc9\001\002" +
    "\000\020\004\052\005\050\006\051\063\062\064\056\065" +
    "\042\120\040\001\002\000\050\066\uffd5\067\uffd5\070\uffd5" +
    "\071\uffd5\072\uffd5\073\uffd5\075\uffd5\076\uffd5\077\uffd5\100" +
    "\uffd5\101\uffd5\103\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5" +
    "\110\uffd5\121\uffd5\123\uffd5\001\002\000\004\005\063\001" +
    "\002\000\020\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf" +
    "\121\uffbf\123\uffbf\001\002\000\020\075\uffc2\076\uffc2\077" +
    "\uffc2\100\uffc2\101\uffc2\121\uffc2\123\uffc2\001\002\000\050" +
    "\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\075" +
    "\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\103\uffd6\104\uffd6" +
    "\105\uffd6\106\uffd6\107\uffd6\110\uffd6\121\uffd6\123\uffd6\001" +
    "\002\000\020\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca" +
    "\121\uffca\123\uffca\001\002\000\050\066\uffd9\067\uffd9\070" +
    "\uffd9\071\uffd9\072\uffd9\073\uffd9\075\uffd9\076\uffd9\077\uffd9" +
    "\100\uffd9\101\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9\107" +
    "\uffd9\110\uffd9\121\uffd9\123\uffd9\001\002\000\024\004\052" +
    "\005\050\006\051\063\062\064\056\065\042\103\041\104" +
    "\055\120\040\001\002\000\024\004\052\005\050\006\051" +
    "\063\062\064\056\065\042\103\041\104\055\120\040\001" +
    "\002\000\024\004\052\005\050\006\051\063\062\064\056" +
    "\065\042\103\041\104\055\120\040\001\002\000\024\004" +
    "\052\005\050\006\051\063\062\064\056\065\042\103\041" +
    "\104\055\120\040\001\002\000\024\004\052\005\050\006" +
    "\051\063\062\064\056\065\042\103\041\104\055\120\040" +
    "\001\002\000\024\004\052\005\050\006\051\063\062\064" +
    "\056\065\042\103\041\104\055\120\040\001\002\000\024" +
    "\004\052\005\050\006\051\063\062\064\056\065\042\103" +
    "\041\104\055\120\040\001\002\000\024\004\052\005\050" +
    "\006\051\063\062\064\056\065\042\103\041\104\055\120" +
    "\040\001\002\000\024\004\052\005\050\006\051\063\062" +
    "\064\056\065\042\103\041\104\055\120\040\001\002\000" +
    "\024\004\052\005\050\006\051\063\062\064\056\065\042" +
    "\103\041\104\055\120\040\001\002\000\024\004\052\005" +
    "\050\006\051\063\062\064\056\065\042\103\041\104\055" +
    "\120\040\001\002\000\024\004\052\005\050\006\051\063" +
    "\062\064\056\065\042\103\041\104\055\120\040\001\002" +
    "\000\034\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\103" +
    "\071\104\065\105\073\106\066\107\070\110\077\121\uffcc" +
    "\123\uffcc\001\002\000\050\066\uffdc\067\uffdc\070\uffdc\071" +
    "\uffdc\072\uffdc\073\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc" +
    "\101\uffdc\103\uffdc\104\uffdc\105\uffdc\106\uffdc\107\uffdc\110" +
    "\uffdc\121\uffdc\123\uffdc\001\002\000\034\075\uffcd\076\uffcd" +
    "\077\uffcd\100\uffcd\101\uffcd\103\071\104\065\105\073\106" +
    "\066\107\070\110\077\121\uffcd\123\uffcd\001\002\000\034" +
    "\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\103\071\104" +
    "\065\105\073\106\066\107\070\110\077\121\uffcb\123\uffcb" +
    "\001\002\000\034\075\uffce\076\uffce\077\uffce\100\uffce\101" +
    "\uffce\103\071\104\065\105\073\106\066\107\070\110\077" +
    "\121\uffce\123\uffce\001\002\000\050\066\uffdf\067\uffdf\070" +
    "\uffdf\071\uffdf\072\uffdf\073\uffdf\075\uffdf\076\uffdf\077\uffdf" +
    "\100\uffdf\101\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107" +
    "\uffdf\110\uffdf\121\uffdf\123\uffdf\001\002\000\034\075\uffd0" +
    "\076\uffd0\077\uffd0\100\uffd0\101\uffd0\103\071\104\065\105" +
    "\073\106\066\107\070\110\077\121\uffd0\123\uffd0\001\002" +
    "\000\050\066\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1\073" +
    "\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\103\uffe1" +
    "\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1\121\uffe1\123" +
    "\uffe1\001\002\000\050\066\uffdd\067\uffdd\070\uffdd\071\uffdd" +
    "\072\uffdd\073\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101" +
    "\uffdd\103\uffdd\104\uffdd\105\uffdd\106\uffdd\107\uffdd\110\uffdd" +
    "\121\uffdd\123\uffdd\001\002\000\034\075\uffcf\076\uffcf\077" +
    "\uffcf\100\uffcf\101\uffcf\103\071\104\065\105\073\106\066" +
    "\107\070\110\077\121\uffcf\123\uffcf\001\002\000\050\066" +
    "\uffde\067\uffde\070\uffde\071\uffde\072\uffde\073\uffde\075\uffde" +
    "\076\uffde\077\uffde\100\uffde\101\uffde\103\uffde\104\uffde\105" +
    "\uffde\106\uffde\107\uffde\110\uffde\121\uffde\123\uffde\001\002" +
    "\000\050\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073" +
    "\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\103\uffe0" +
    "\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110\uffe0\121\uffe0\123" +
    "\uffe0\001\002\000\020\075\uffc1\076\uffc1\077\uffc1\100\uffc1" +
    "\101\uffc1\121\uffc1\123\uffc1\001\002\000\030\004\052\005" +
    "\050\006\051\063\062\064\056\065\042\074\057\102\045" +
    "\103\041\104\055\120\040\001\002\000\030\004\052\005" +
    "\050\006\051\063\062\064\056\065\042\074\057\102\045" +
    "\103\041\104\055\120\040\001\002\000\020\075\uffc4\076" +
    "\uffc4\077\uffc4\100\uffc4\101\uffc4\121\uffc4\123\uffc4\001\002" +
    "\000\020\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\121" +
    "\uffc3\123\uffc3\001\002\000\030\004\052\005\050\006\051" +
    "\063\062\064\056\065\042\074\057\102\045\103\041\104" +
    "\055\120\040\001\002\000\030\004\052\005\050\006\051" +
    "\063\062\064\056\065\042\074\057\102\045\103\041\104" +
    "\055\120\040\001\002\000\030\004\052\005\050\006\051" +
    "\063\062\064\056\065\042\074\057\102\045\103\041\104" +
    "\055\120\040\001\002\000\020\075\117\076\116\077\uffc8" +
    "\100\uffc8\101\uffc8\121\uffc8\123\uffc8\001\002\000\020\075" +
    "\117\076\116\077\uffc6\100\uffc6\101\uffc6\121\uffc6\123\uffc6" +
    "\001\002\000\020\075\117\076\116\077\uffc7\100\uffc7\101" +
    "\uffc7\121\uffc7\123\uffc7\001\002\000\050\066\uffda\067\uffda" +
    "\070\uffda\071\uffda\072\uffda\073\uffda\075\uffda\076\uffda\077" +
    "\uffda\100\uffda\101\uffda\103\uffda\104\uffda\105\uffda\106\uffda" +
    "\107\uffda\110\uffda\121\uffda\123\uffda\001\002\000\012\077" +
    "\124\100\122\101\123\121\132\001\002\000\050\066\uffd7" +
    "\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\075\uffd7\076" +
    "\uffd7\077\uffd7\100\uffd7\101\uffd7\103\uffd7\104\uffd7\105\uffd7" +
    "\106\uffd7\107\uffd7\110\uffd7\121\uffd7\123\uffd7\001\002\000" +
    "\012\005\ufff4\011\ufff4\012\ufff4\115\ufff4\001\002\000\012" +
    "\005\ufff2\011\ufff2\012\ufff2\115\ufff2\001\002\000\004\123" +
    "\uffe2\001\002\000\030\004\052\005\050\006\051\063\062" +
    "\064\056\065\042\074\057\102\045\103\041\104\055\120" +
    "\040\001\002\000\030\004\052\005\050\006\051\063\062" +
    "\064\056\065\042\074\057\102\045\103\041\104\055\120" +
    "\040\001\002\000\004\123\uffe3\001\002\000\012\077\124" +
    "\100\122\101\123\123\uffe5\001\002\000\012\077\124\100" +
    "\122\101\123\123\uffe4\001\002\000\006\003\153\005\151" +
    "\001\002\000\006\003\uffee\005\uffee\001\002\000\006\003" +
    "\uffea\005\uffea\001\002\000\006\003\uffeb\005\uffeb\001\002" +
    "\000\006\003\uffec\005\uffec\001\002\000\006\003\uffed\005" +
    "\uffed\001\002\000\010\122\uffe8\123\uffe8\124\uffe8\001\002" +
    "\000\010\122\uffef\123\uffef\124\154\001\002\000\010\122" +
    "\uffe7\123\uffe7\124\uffe7\001\002\000\004\005\155\001\002" +
    "\000\010\122\uffe9\123\uffe9\124\uffe9\001\002\000\012\005" +
    "\ufff1\011\ufff1\012\ufff1\115\ufff1\001\002\000\012\005\024" +
    "\011\027\012\023\115\160\001\002\000\004\002\ufffe\001" +
    "\002\000\006\114\ufff8\124\ufff8\001\002\000\004\005\166" +
    "\001\002\000\006\114\ufffb\124\164\001\002\000\004\005" +
    "\165\001\002\000\006\114\ufff9\124\ufff9\001\002\000\006" +
    "\114\ufff7\124\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\012\003\023\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\003\023\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\016\001\001\000\004\014\162" +
    "\001\001\000\002\001\001\000\004\015\156\001\001\000" +
    "\002\001\001\000\004\015\021\001\001\000\002\001\001" +
    "\000\010\017\025\022\030\024\024\001\001\000\004\020" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\032\022\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\002\053\003\052\004\045\005\057\006\042\007\043" +
    "\010\060\011\046\001\001\000\022\002\053\003\052\004" +
    "\045\005\057\006\130\007\043\010\060\011\046\001\001" +
    "\000\004\004\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\053\003\052\004\045" +
    "\005\057\011\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\113\004\045\001\001\000\006" +
    "\003\112\004\045\001\001\000\010\002\111\003\052\004" +
    "\045\001\001\000\006\003\110\004\045\001\001\000\006" +
    "\003\107\004\045\001\001\000\010\002\106\003\052\004" +
    "\045\001\001\000\006\003\105\004\045\001\001\000\010" +
    "\002\104\003\052\004\045\001\001\000\010\002\103\003" +
    "\052\004\045\001\001\000\010\002\102\003\052\004\045" +
    "\001\001\000\006\003\101\004\045\001\001\000\010\002" +
    "\100\003\052\004\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\002\053\003\052" +
    "\004\045\005\057\010\120\011\046\001\001\000\016\002" +
    "\053\003\052\004\045\005\057\010\117\011\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\053\003" +
    "\052\004\045\005\057\007\126\010\060\011\046\001\001" +
    "\000\020\002\053\003\052\004\045\005\057\007\125\010" +
    "\060\011\046\001\001\000\020\002\053\003\052\004\045" +
    "\005\057\007\124\010\060\011\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\053\003\052" +
    "\004\045\005\057\006\141\007\043\010\060\011\046\001" +
    "\001\000\022\002\053\003\052\004\045\005\057\006\140" +
    "\007\043\010\060\011\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\025\022\030\024\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TrackParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TrackParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TrackParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private LinkedList<MError> syntacticErrors = new LinkedList();
    
    public TrackParser(TrackLexer lexer) { 
        super(lexer);
    }

    public LinkedList<MError> getSyntacticErrors(){
        return syntacticErrors;
    }

    private void addSyntacticError(MError error){
        syntacticErrors.add(error);
    }

    @Override
    protected int error_sync_size(){
        return 1;
    }

    public void syntax_error(java_cup.runtime.Symbol s){
        if(s.value != null){
            addSyntacticError(new MError("Simbolo no esperado.", s.value.toString(), s.left, s.right));
        } else{
            String lexeme;
            System.out.println(s);
            switch(s.sym){
                case 73: lexeme="+="; break;
                case 57: lexeme=">="; break;
                case 77: lexeme="]"; break;
                case 56: lexeme="<"; break;
                case 82: lexeme=","; break;
                case 78: lexeme="("; break;
                case 71: lexeme="++"; break;          
                case 79: lexeme=")"; break;
                case 64: lexeme="!"; break;
                case 62: lexeme="!||"; break;
                case 58: lexeme="!!"; break;
                case 55: lexeme=">"; break;
                case 69: lexeme="%"; break;
                case 52: lexeme="=="; break;
                case 54: lexeme="<"; break;
                case 68: lexeme="/"; break;
                case 65: lexeme="+"; break;
                case 20: lexeme="="; break;
                case 67: lexeme="*"; break;
                case 70: lexeme="^"; break;
                case 81: lexeme=";"; break;
                case 72: lexeme="--"; break;
                case 61: lexeme="||"; break;
                case 74: lexeme="{"; break;
                case 83: lexeme=":"; break;
                case 75: lexeme="}"; break;
                case 53: lexeme="!="; break;
                case 59: lexeme="&&"; break;
                case 60: lexeme="!&&"; break;
                case 63: lexeme="&|"; break;
                case 76: lexeme="["; break;
                default: lexeme="Simbolo no reconocido"; break;
            }
            addSyntacticError(new MError("Simbolo no esperado.", lexeme, s.left, s.right));
        }        
    }

    public void unrecovered_syntax_error(java_cup.runtime.Symbol s){
        //musicInterpreterFrame.addError(new MError(s.left, s.right, ErrorType.SEMANTIC, "No se esperaba el lexema [" +s.value+ "]"));
        System.out.println("No se esperaba el lexema [" +s.sym+ "]");
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$TrackParser$actions {
  private final TrackParser parser;

  /** Constructor */
  CUP$TrackParser$actions(TrackParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$TrackParser$do_action_part00000000(
    int                        CUP$TrackParser$act_num,
    java_cup.runtime.lr_parser CUP$TrackParser$parser,
    java.util.Stack            CUP$TrackParser$stack,
    int                        CUP$TrackParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TrackParser$result;

      /* select the action based on the action number */
      switch (CUP$TrackParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)).value;
		RESULT = start_val;
              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TrackParser$parser.done_parsing();
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= track 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("s",17, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // track ::= TRACK ID extend CURLYBRACKETO statement CURLYBRACKETC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-4)).value;
		 System.out.println(val); 
              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("track",8, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-5)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // track ::= TRACK ID CURLYBRACKETO statement CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("track",8, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-4)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // track ::= error s 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("track",8, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // track ::= error CURLYBRACKETO 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("track",8, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // extend ::= EXTENDS extends_list 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("extend",9, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // extend ::= error 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("extend",9, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // extends_list ::= extends_list COMMA ID 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("extends_list",10, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // extends_list ::= ID 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("extends_list",10, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // extends_list ::= error ID 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("extends_list",10, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= statement KEEP var_declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-3)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= statement KEEP var_declaration_assignment SEMICOLON 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-3)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= statement var_declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= statement var_declaration_assignment SEMICOLON 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= statement var_assignment SEMICOLON 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_declaration ::= VAR var_type var_list 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_declaration",13, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_type ::= INTEGERTYPE 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_type",14, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_type ::= DOUBLETYPE 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_type",14, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_type ::= BOOLEANTYPE 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_type",14, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_type ::= STRINGTYPE 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_type",14, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_type ::= CHARACTERTYPE 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_type",14, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_list ::= var_list COMMA ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$TrackParser$stack.peek()).value;
		 System.out.println(val); 
              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_list ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$TrackParser$stack.peek()).value;
		 System.out.println(val); 
              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_list ::= error 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_declaration_assignment ::= var_declaration EQUAL logical_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_declaration_assignment",16, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_assignment ::= ID EQUAL logical_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_assignment",18, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_assignment ::= ID INCREMENTANDASSIGMENT logical_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_assignment",18, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_assignment ::= ID INCREMENT 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_assignment",18, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_assignment ::= ID DECREMENT 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_assignment",18, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arithmetic_op ::= arithmetic_op PLUS arithmetic_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arithmetic_op ::= arithmetic_op MINUS arithmetic_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arithmetic_op ::= arithmetic_op ASTERISK arithmetic_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arithmetic_op ::= arithmetic_op SLASH arithmetic_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arithmetic_op ::= arithmetic_op MOD arithmetic_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arithmetic_op ::= arithmetic_op POWER arithmetic_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arithmetic_op ::= arithmetic_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arithmetic_exp ::= PLUS arithmetic_value 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",1, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arithmetic_exp ::= MINUS arithmetic_value 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",1, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arithmetic_exp ::= arithmetic_value 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",1, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arithmetic_value ::= PARENTHESISO logical_op PARENTHESISC 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arithmetic_value ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arithmetic_value ::= INTEGER 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arithmetic_value ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arithmetic_value ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arithmetic_value ::= ID 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arithmetic_value ::= STRING 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relational_op ::= arithmetic_op ISEQUAL arithmetic_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // relational_op ::= arithmetic_op NOTEQUAL arithmetic_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // relational_op ::= arithmetic_op GREATERTHAN arithmetic_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // relational_op ::= arithmetic_op LESSTHAN arithmetic_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relational_op ::= arithmetic_op GREATERTHANOREQUALTO arithmetic_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relational_op ::= arithmetic_op LESSTHANOREQUALTO arithmetic_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relational_op ::= ISNULL ID 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relational_op ::= arithmetic_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logical_op ::= logical_op OR logical_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_op",4, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // logical_op ::= logical_op NOR logical_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_op",4, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // logical_op ::= logical_op XOR logical_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_op",4, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // logical_op ::= logical_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_op",4, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // logical_exp ::= logical_exp AND logical_exp2 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_exp",5, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // logical_exp ::= logical_exp NAND logical_exp2 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_exp",5, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // logical_exp ::= logical_exp2 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_exp",5, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // logical_exp2 ::= NOT logical_value 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_exp2",6, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // logical_exp2 ::= logical_value 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_exp2",6, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // logical_value ::= relational_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_value",7, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$TrackParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$TrackParser$do_action(
    int                        CUP$TrackParser$act_num,
    java_cup.runtime.lr_parser CUP$TrackParser$parser,
    java.util.Stack            CUP$TrackParser$stack,
    int                        CUP$TrackParser$top)
    throws java.lang.Exception
    {
              return CUP$TrackParser$do_action_part00000000(
                               CUP$TrackParser$act_num,
                               CUP$TrackParser$parser,
                               CUP$TrackParser$stack,
                               CUP$TrackParser$top);
    }
}

}
