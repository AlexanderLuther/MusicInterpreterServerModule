
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.hluther.interpreter.parser;

import com.hluther.interpreter.lexer.TrackLexer;
import java.util.LinkedList;
import com.hluther.entity.MError;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class TrackParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TrackSymbol.class;
}

  /** Default constructor. */
  @Deprecated
  public TrackParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public TrackParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TrackParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\012\010\000\002\012" +
    "\007\000\002\013\004\000\002\013\004\000\002\014\005" +
    "\000\002\014\003\000\002\015\004\000\002\015\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\004\000\002" +
    "\016\004\000\002\017\005\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\021\005\000\002\021\003\000\002\022\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\004\005\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\003\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\003\000\002\010" +
    "\004\000\002\010\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\004\007\005\001\002\000\004\002\145\001" +
    "\002\000\004\005\006\001\002\000\006\003\010\010\007" +
    "\001\002\000\004\005\141\001\002\000\004\124\140\001" +
    "\002\000\004\114\012\001\002\000\010\011\017\012\013" +
    "\115\020\001\002\000\014\013\126\014\133\015\132\016" +
    "\131\017\130\001\002\000\010\011\ufff9\012\ufff9\115\ufff9" +
    "\001\002\000\006\122\027\123\125\001\002\000\010\011" +
    "\017\012\013\115\124\001\002\000\004\012\013\001\002" +
    "\000\004\002\uffff\001\002\000\004\123\022\001\002\000" +
    "\010\011\ufff5\012\ufff5\115\ufff5\001\002\000\006\122\027" +
    "\123\026\001\002\000\004\123\025\001\002\000\010\011" +
    "\ufff7\012\ufff7\115\ufff7\001\002\000\010\011\ufff8\012\ufff8" +
    "\115\ufff8\001\002\000\030\004\042\005\040\006\041\063" +
    "\051\064\046\065\034\074\047\102\035\103\031\104\045" +
    "\120\030\001\002\000\030\004\042\005\040\006\041\063" +
    "\051\064\046\065\034\074\047\102\035\103\031\104\045" +
    "\120\030\001\002\000\020\004\042\005\040\006\041\063" +
    "\051\064\046\065\034\120\030\001\002\000\012\077\113" +
    "\100\112\101\114\123\uffec\001\002\000\020\075\107\076" +
    "\106\077\uffcf\100\uffcf\101\uffcf\121\uffcf\123\uffcf\001\002" +
    "\000\050\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde\073" +
    "\uffde\075\uffde\076\uffde\077\uffde\100\uffde\101\uffde\103\uffde" +
    "\104\uffde\105\uffde\106\uffde\107\uffde\110\uffde\121\uffde\123" +
    "\uffde\001\002\000\026\004\042\005\040\006\041\063\051" +
    "\064\046\065\034\074\047\103\031\104\045\120\030\001" +
    "\002\000\050\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2" +
    "\073\uffe2\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\103" +
    "\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2\110\uffe2\121\uffe2" +
    "\123\uffe2\001\002\000\020\075\uffca\076\uffca\077\uffca\100" +
    "\uffca\101\uffca\121\uffca\123\uffca\001\002\000\050\066\uffdc" +
    "\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\075\uffdc\076" +
    "\uffdc\077\uffdc\100\uffdc\101\uffdc\103\uffdc\104\uffdc\105\uffdc" +
    "\106\uffdc\107\uffdc\110\uffdc\121\uffdc\123\uffdc\001\002\000" +
    "\050\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd" +
    "\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd\103\uffdd\104" +
    "\uffdd\105\uffdd\106\uffdd\107\uffdd\110\uffdd\121\uffdd\123\uffdd" +
    "\001\002\000\050\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072" +
    "\uffdb\073\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb" +
    "\103\uffdb\104\uffdb\105\uffdb\106\uffdb\107\uffdb\110\uffdb\121" +
    "\uffdb\123\uffdb\001\002\000\050\066\uffe5\067\uffe5\070\uffe5" +
    "\071\uffe5\072\uffe5\073\uffe5\075\uffe5\076\uffe5\077\uffe5\100" +
    "\uffe5\101\uffe5\103\uffe5\104\uffe5\105\uffe5\106\uffe5\107\uffe5" +
    "\110\uffe5\121\uffe5\123\uffe5\001\002\000\050\066\062\067" +
    "\057\070\066\071\064\072\065\073\070\075\uffd3\076\uffd3" +
    "\077\uffd3\100\uffd3\101\uffd3\103\061\104\055\105\063\106" +
    "\056\107\060\110\067\121\uffd3\123\uffd3\001\002\000\020" +
    "\004\042\005\040\006\041\063\051\064\046\065\034\120" +
    "\030\001\002\000\050\066\uffdf\067\uffdf\070\uffdf\071\uffdf" +
    "\072\uffdf\073\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101" +
    "\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf\107\uffdf\110\uffdf" +
    "\121\uffdf\123\uffdf\001\002\000\004\005\053\001\002\000" +
    "\020\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\121\uffc9" +
    "\123\uffc9\001\002\000\050\066\uffe0\067\uffe0\070\uffe0\071" +
    "\uffe0\072\uffe0\073\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0" +
    "\101\uffe0\103\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110" +
    "\uffe0\121\uffe0\123\uffe0\001\002\000\020\075\uffcc\076\uffcc" +
    "\077\uffcc\100\uffcc\101\uffcc\121\uffcc\123\uffcc\001\002\000" +
    "\020\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\121\uffd4" +
    "\123\uffd4\001\002\000\050\066\uffe3\067\uffe3\070\uffe3\071" +
    "\uffe3\072\uffe3\073\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3" +
    "\101\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3\107\uffe3\110" +
    "\uffe3\121\uffe3\123\uffe3\001\002\000\024\004\042\005\040" +
    "\006\041\063\051\064\046\065\034\103\031\104\045\120" +
    "\030\001\002\000\024\004\042\005\040\006\041\063\051" +
    "\064\046\065\034\103\031\104\045\120\030\001\002\000" +
    "\024\004\042\005\040\006\041\063\051\064\046\065\034" +
    "\103\031\104\045\120\030\001\002\000\024\004\042\005" +
    "\040\006\041\063\051\064\046\065\034\103\031\104\045" +
    "\120\030\001\002\000\024\004\042\005\040\006\041\063" +
    "\051\064\046\065\034\103\031\104\045\120\030\001\002" +
    "\000\024\004\042\005\040\006\041\063\051\064\046\065" +
    "\034\103\031\104\045\120\030\001\002\000\024\004\042" +
    "\005\040\006\041\063\051\064\046\065\034\103\031\104" +
    "\045\120\030\001\002\000\024\004\042\005\040\006\041" +
    "\063\051\064\046\065\034\103\031\104\045\120\030\001" +
    "\002\000\024\004\042\005\040\006\041\063\051\064\046" +
    "\065\034\103\031\104\045\120\030\001\002\000\024\004" +
    "\042\005\040\006\041\063\051\064\046\065\034\103\031" +
    "\104\045\120\030\001\002\000\024\004\042\005\040\006" +
    "\041\063\051\064\046\065\034\103\031\104\045\120\030" +
    "\001\002\000\024\004\042\005\040\006\041\063\051\064" +
    "\046\065\034\103\031\104\045\120\030\001\002\000\034" +
    "\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\103\061\104" +
    "\055\105\063\106\056\107\060\110\067\121\uffd6\123\uffd6" +
    "\001\002\000\050\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072" +
    "\uffe6\073\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\101\uffe6" +
    "\103\uffe6\104\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6\121" +
    "\uffe6\123\uffe6\001\002\000\034\075\uffd7\076\uffd7\077\uffd7" +
    "\100\uffd7\101\uffd7\103\061\104\055\105\063\106\056\107" +
    "\060\110\067\121\uffd7\123\uffd7\001\002\000\034\075\uffd5" +
    "\076\uffd5\077\uffd5\100\uffd5\101\uffd5\103\061\104\055\105" +
    "\063\106\056\107\060\110\067\121\uffd5\123\uffd5\001\002" +
    "\000\034\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\103" +
    "\061\104\055\105\063\106\056\107\060\110\067\121\uffd8" +
    "\123\uffd8\001\002\000\050\066\uffe9\067\uffe9\070\uffe9\071" +
    "\uffe9\072\uffe9\073\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9" +
    "\101\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9\110" +
    "\uffe9\121\uffe9\123\uffe9\001\002\000\034\075\uffda\076\uffda" +
    "\077\uffda\100\uffda\101\uffda\103\061\104\055\105\063\106" +
    "\056\107\060\110\067\121\uffda\123\uffda\001\002\000\050" +
    "\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\075" +
    "\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\103\uffeb\104\uffeb" +
    "\105\uffeb\106\uffeb\107\uffeb\110\uffeb\121\uffeb\123\uffeb\001" +
    "\002\000\050\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7" +
    "\073\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7\101\uffe7\103" +
    "\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7\121\uffe7" +
    "\123\uffe7\001\002\000\034\075\uffd9\076\uffd9\077\uffd9\100" +
    "\uffd9\101\uffd9\103\061\104\055\105\063\106\056\107\060" +
    "\110\067\121\uffd9\123\uffd9\001\002\000\050\066\uffe8\067" +
    "\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\075\uffe8\076\uffe8" +
    "\077\uffe8\100\uffe8\101\uffe8\103\uffe8\104\uffe8\105\uffe8\106" +
    "\uffe8\107\uffe8\110\uffe8\121\uffe8\123\uffe8\001\002\000\050" +
    "\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\075" +
    "\uffea\076\uffea\077\uffea\100\uffea\101\uffea\103\uffea\104\uffea" +
    "\105\uffea\106\uffea\107\uffea\110\uffea\121\uffea\123\uffea\001" +
    "\002\000\020\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb" +
    "\121\uffcb\123\uffcb\001\002\000\030\004\042\005\040\006" +
    "\041\063\051\064\046\065\034\074\047\102\035\103\031" +
    "\104\045\120\030\001\002\000\030\004\042\005\040\006" +
    "\041\063\051\064\046\065\034\074\047\102\035\103\031" +
    "\104\045\120\030\001\002\000\020\075\uffce\076\uffce\077" +
    "\uffce\100\uffce\101\uffce\121\uffce\123\uffce\001\002\000\020" +
    "\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\121\uffcd\123" +
    "\uffcd\001\002\000\030\004\042\005\040\006\041\063\051" +
    "\064\046\065\034\074\047\102\035\103\031\104\045\120" +
    "\030\001\002\000\030\004\042\005\040\006\041\063\051" +
    "\064\046\065\034\074\047\102\035\103\031\104\045\120" +
    "\030\001\002\000\030\004\042\005\040\006\041\063\051" +
    "\064\046\065\034\074\047\102\035\103\031\104\045\120" +
    "\030\001\002\000\020\075\107\076\106\077\uffd0\100\uffd0" +
    "\101\uffd0\121\uffd0\123\uffd0\001\002\000\020\075\107\076" +
    "\106\077\uffd2\100\uffd2\101\uffd2\121\uffd2\123\uffd2\001\002" +
    "\000\020\075\107\076\106\077\uffd1\100\uffd1\101\uffd1\121" +
    "\uffd1\123\uffd1\001\002\000\050\066\uffe4\067\uffe4\070\uffe4" +
    "\071\uffe4\072\uffe4\073\uffe4\075\uffe4\076\uffe4\077\uffe4\100" +
    "\uffe4\101\uffe4\103\uffe4\104\uffe4\105\uffe4\106\uffe4\107\uffe4" +
    "\110\uffe4\121\uffe4\123\uffe4\001\002\000\012\077\113\100" +
    "\112\101\114\121\122\001\002\000\050\066\uffe1\067\uffe1" +
    "\070\uffe1\071\uffe1\072\uffe1\073\uffe1\075\uffe1\076\uffe1\077" +
    "\uffe1\100\uffe1\101\uffe1\103\uffe1\104\uffe1\105\uffe1\106\uffe1" +
    "\107\uffe1\110\uffe1\121\uffe1\123\uffe1\001\002\000\010\011" +
    "\ufffa\012\ufffa\115\ufffa\001\002\000\004\002\000\001\002" +
    "\000\010\011\ufff6\012\ufff6\115\ufff6\001\002\000\004\005" +
    "\ufff3\001\002\000\004\005\134\001\002\000\004\005\uffef" +
    "\001\002\000\004\005\ufff0\001\002\000\004\005\ufff1\001" +
    "\002\000\004\005\ufff2\001\002\000\010\122\uffed\123\uffed" +
    "\124\uffed\001\002\000\010\122\ufff4\123\ufff4\124\136\001" +
    "\002\000\004\005\137\001\002\000\010\122\uffee\123\uffee" +
    "\124\uffee\001\002\000\004\114\ufffd\001\002\000\006\114" +
    "\ufffb\124\ufffb\001\002\000\006\114\ufffe\124\143\001\002" +
    "\000\004\005\144\001\002\000\006\114\ufffc\124\ufffc\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\004\012\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\010\001\001\000\004\014\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\015\016\013\017\014\022\020\001\001\000\004\020\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\122\017\014\022\020\001\001\000\006\017\022\022\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\043\003\042\004\035\005" +
    "\047\006\031\007\032\010\051\011\036\001\001\000\022" +
    "\002\043\003\042\004\035\005\047\006\120\007\032\010" +
    "\051\011\036\001\001\000\004\004\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\043\003\042\004\035\005\047\011\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\103\004" +
    "\035\001\001\000\006\003\102\004\035\001\001\000\010" +
    "\002\101\003\042\004\035\001\001\000\006\003\100\004" +
    "\035\001\001\000\006\003\077\004\035\001\001\000\010" +
    "\002\076\003\042\004\035\001\001\000\006\003\075\004" +
    "\035\001\001\000\010\002\074\003\042\004\035\001\001" +
    "\000\010\002\073\003\042\004\035\001\001\000\010\002" +
    "\072\003\042\004\035\001\001\000\006\003\071\004\035" +
    "\001\001\000\010\002\070\003\042\004\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\002\043\003\042\004\035\005\047\010\110\011\036" +
    "\001\001\000\016\002\043\003\042\004\035\005\047\010" +
    "\107\011\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\002\043\003\042\004\035\005\047\007\116\010" +
    "\051\011\036\001\001\000\020\002\043\003\042\004\035" +
    "\005\047\007\115\010\051\011\036\001\001\000\020\002" +
    "\043\003\042\004\035\005\047\007\114\010\051\011\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TrackParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TrackParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TrackParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private LinkedList<MError> syntacticErrors = new LinkedList();
    
    public TrackParser(TrackLexer lexer) { 
        super(lexer);
    }

    public LinkedList<MError> getSyntacticErrors(){
        return syntacticErrors;
    }

    private void addSyntacticError(MError error){
        syntacticErrors.add(error);
    }

  /*  @Override
    protected int error_sync_size(){
        return 1;
    }*/

    public void syntax_error(java_cup.runtime.Symbol s){
        if(s.value != null){
            addSyntacticError(new MError("Simbolo no esperado.", s.value.toString(), s.left, s.right));
        } else{
            String lexeme;
            System.out.println(s);
            switch(s.sym){
                case 73: lexeme="+="; break;
                case 57: lexeme=">="; break;
                case 77: lexeme="]"; break;
                case 56: lexeme="<"; break;
                case 82: lexeme=","; break;
                case 78: lexeme="("; break;
                case 71: lexeme="++"; break;          
                case 79: lexeme=")"; break;
                case 64: lexeme="!"; break;
                case 62: lexeme="!||"; break;
                case 58: lexeme="!!"; break;
                case 55: lexeme=">"; break;
                case 69: lexeme="%"; break;
                case 52: lexeme="=="; break;
                case 54: lexeme="<"; break;
                case 68: lexeme="/"; break;
                case 65: lexeme="+"; break;
                case 20: lexeme="="; break;
                case 67: lexeme="*"; break;
                case 70: lexeme="^"; break;
                case 81: lexeme=";"; break;
                case 72: lexeme="--"; break;
                case 61: lexeme="||"; break;
                case 74: lexeme="{"; break;
                case 83: lexeme=":"; break;
                case 75: lexeme="}"; break;
                case 53: lexeme="!="; break;
                case 59: lexeme="&&"; break;
                case 60: lexeme="!&&"; break;
                case 63: lexeme="&|"; break;
                case 76: lexeme="["; break;
                default: lexeme="Simbolo no reconocido"; break;
            }
            addSyntacticError(new MError("Simbolo no esperado.", lexeme, s.left, s.right));
        }        
    }

    public void unrecovered_syntax_error(java_cup.runtime.Symbol s){
        //musicInterpreterFrame.addError(new MError(s.left, s.right, ErrorType.SEMANTIC, "No se esperaba el lexema [" +s.value+ "]"));
        System.out.println("No se esperaba el lexema [" +s.sym+ "]");
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$TrackParser$actions {
  private final TrackParser parser;

  /** Constructor */
  CUP$TrackParser$actions(TrackParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$TrackParser$do_action_part00000000(
    int                        CUP$TrackParser$act_num,
    java_cup.runtime.lr_parser CUP$TrackParser$parser,
    java.util.Stack            CUP$TrackParser$stack,
    int                        CUP$TrackParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TrackParser$result;

      /* select the action based on the action number */
      switch (CUP$TrackParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= track EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)).value;
		RESULT = start_val;
              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TrackParser$parser.done_parsing();
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // track ::= TRACK ID extend CURLYBRACKETO statement CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("track",8, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-5)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // track ::= TRACK ID extend CURLYBRACKETO CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("track",8, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-4)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // extend ::= EXTENDS extends_list 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("extend",9, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // extend ::= error COMMA 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("extend",9, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extends_list ::= extends_list COMMA ID 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("extends_list",10, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // extends_list ::= ID 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("extends_list",10, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= statement statement_list 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= statement_list 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement_list ::= KEEP var_declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement_list ::= KEEP var_declaration_assignment SEMICOLON 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement_list ::= var_declaration SEMICOLON 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement_list ::= var_declaration_assignment SEMICOLON 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_declaration ::= VAR var_type var_list 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_declaration",13, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_type ::= INTEGERTYPE 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_type",14, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_type ::= DOUBLETYPE 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_type",14, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_type ::= BOOLEANTYPE 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_type",14, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_type ::= STRINGTYPE 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_type",14, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_type ::= CHARACTERTYPE 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_type",14, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_list ::= var_list COMMA ID 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_list ::= ID 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_declaration_assignment ::= var_declaration EQUAL logical_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("var_declaration_assignment",16, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arithmetic_op ::= arithmetic_op PLUS arithmetic_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arithmetic_op ::= arithmetic_op MINUS arithmetic_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arithmetic_op ::= arithmetic_op ASTERISK arithmetic_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arithmetic_op ::= arithmetic_op SLASH arithmetic_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arithmetic_op ::= arithmetic_op MOD arithmetic_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arithmetic_op ::= arithmetic_op POWER arithmetic_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arithmetic_op ::= arithmetic_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_op",0, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arithmetic_exp ::= PLUS arithmetic_value 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",1, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arithmetic_exp ::= MINUS arithmetic_value 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",1, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arithmetic_exp ::= arithmetic_value 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",1, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arithmetic_value ::= PARENTHESISO logical_op PARENTHESISC 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arithmetic_value ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arithmetic_value ::= INTEGER 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arithmetic_value ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arithmetic_value ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arithmetic_value ::= ID 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arithmetic_value ::= STRING 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("arithmetic_value",2, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // relational_op ::= arithmetic_op ISEQUAL arithmetic_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relational_op ::= arithmetic_op NOTEQUAL arithmetic_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relational_op ::= arithmetic_op GREATERTHAN arithmetic_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relational_op ::= arithmetic_op LESSTHAN arithmetic_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relational_op ::= arithmetic_op GREATERTHANOREQUALTO arithmetic_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relational_op ::= arithmetic_op LESSTHANOREQUALTO arithmetic_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relational_op ::= ISNULL ID 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relational_op ::= arithmetic_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("relational_op",3, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logical_op ::= logical_op OR logical_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_op",4, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // logical_op ::= logical_op NOR logical_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_op",4, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // logical_op ::= logical_op XOR logical_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_op",4, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logical_op ::= logical_exp 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_op",4, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logical_exp ::= logical_exp AND logical_exp2 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_exp",5, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logical_exp ::= logical_exp NAND logical_exp2 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_exp",5, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-2)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logical_exp ::= logical_exp2 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_exp",5, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logical_exp2 ::= NOT logical_value 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_exp2",6, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.elementAt(CUP$TrackParser$top-1)), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // logical_exp2 ::= logical_value 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_exp2",6, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logical_value ::= relational_op 
            {
              Object RESULT =null;

              CUP$TrackParser$result = parser.getSymbolFactory().newSymbol("logical_value",7, ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TrackParser$stack.peek()), RESULT);
            }
          return CUP$TrackParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$TrackParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$TrackParser$do_action(
    int                        CUP$TrackParser$act_num,
    java_cup.runtime.lr_parser CUP$TrackParser$parser,
    java.util.Stack            CUP$TrackParser$stack,
    int                        CUP$TrackParser$top)
    throws java.lang.Exception
    {
              return CUP$TrackParser$do_action_part00000000(
                               CUP$TrackParser$act_num,
                               CUP$TrackParser$parser,
                               CUP$TrackParser$stack,
                               CUP$TrackParser$top);
    }
}

}
